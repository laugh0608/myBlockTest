// Created by Microsoft (R) C/C++ Compiler Version 14.39.33321.0 (e881b364).
//
// D:\MYBlog\cppTest\VisualStudio\MyBlockTest\MyBlockTest\x64\Debug\CAPE-OPENv1-1-0.tlh
//
// C++ source equivalent of Win32 type library D:\MYBlog\cppTest\VisualStudio\MyBlockTest\CAPE-OPENv1-1-0.tlb
// compiler-generated file - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("4a5e2e81-c093-11d4-9f1b-0010a4d198c2"))
/* LIBID */ __CAPEOPEN110;
struct __declspec(uuid("678c0990-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeIdentification;
struct __declspec(uuid("678c099a-0093-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeCollection;
struct __declspec(uuid("678c0a9b-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeUtilities;
struct __declspec(uuid("678c099c-0093-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeParameterSpec;
enum eCapeParamType : int;
struct __declspec(uuid("678c099d-0093-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeRealParameterSpec;
struct __declspec(uuid("678c099e-0093-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeIntegerParameterSpec;
struct __declspec(uuid("678c099f-0093-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeOptionParameterSpec;
struct __declspec(uuid("678c09a8-0093-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeBooleanParameterSpec;
struct __declspec(uuid("678c09a9-0093-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeArrayParameterSpec;
struct __declspec(uuid("678c09a0-0093-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeParameter;
enum eCapeValidationStatus : int;
enum eCapeParamMode : int;
struct __declspec(uuid("678c0b29-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeBoundaries;
struct __declspec(uuid("678c0b10-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeRoot;
struct __declspec(uuid("678c0b11-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeUser;
struct __declspec(uuid("678c0b12-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeUnknown;
struct __declspec(uuid("678c0b13-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeData;
struct __declspec(uuid("678c0b14-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeLicenceError;
struct __declspec(uuid("678c0b15-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeBadCOParameter;
struct __declspec(uuid("e29e42b3-e481-45c6-a737-78f4a7fc0391"))
/* dual interface */ ECapeBadArgument;
struct __declspec(uuid("678c0b17-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeInvalidArgument;
struct __declspec(uuid("678c0b18-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeOutOfBounds;
struct __declspec(uuid("678c0b19-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeImplementation;
struct __declspec(uuid("678c0b1a-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeNoImpl;
struct __declspec(uuid("678c0b1b-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeLimitedImpl;
struct __declspec(uuid("678c0b1c-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeComputation;
struct __declspec(uuid("678c0b1d-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeOutOfResources;
struct __declspec(uuid("678c0b1e-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeNoMemory;
struct __declspec(uuid("678c0b1f-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeTimeOut;
struct __declspec(uuid("678c0b20-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeFailedInitialisation;
struct __declspec(uuid("678c0b21-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeSolvingError;
struct __declspec(uuid("678c0b22-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeBadInvOrder;
struct __declspec(uuid("678c0b23-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeInvalidOperation;
struct __declspec(uuid("678c0b24-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapePersistence;
struct __declspec(uuid("678c0b25-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeIllegalAccess;
struct __declspec(uuid("678c0b26-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapePersistenceNotFound;
struct __declspec(uuid("678c0b27-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapePersistenceSystemError;
struct __declspec(uuid("678c0b28-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapePersistenceOverflow;
struct __declspec(uuid("678c09b6-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeThrmPropertyNotAvailable;
struct __declspec(uuid("678c0b07-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeErrorDummy;
enum eCapeErrorInterfaceHR_tag : int;
struct __declspec(uuid("678c0a9c-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSimulationContext;
struct __declspec(uuid("678c0a9d-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeDiagnostic;
struct __declspec(uuid("678c0a9e-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeMaterialTemplateSystem;
struct __declspec(uuid("678c0a9f-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeCOSEUtilities;
struct __declspec(uuid("678c0992-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoReliability;
struct __declspec(uuid("678c0993-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoMaterialTemplate;
struct __declspec(uuid("678c0994-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoMaterialObject;
struct __declspec(uuid("678c0995-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoSystem;
struct __declspec(uuid("678c0996-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoPropertyPackage;
struct __declspec(uuid("678c0997-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoEquilibriumServer;
struct __declspec(uuid("678c0991-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoCalculationRoutine;
struct __declspec(uuid("678c0a9b-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoMaterial;
struct __declspec(uuid("678c0a9c-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoMaterialContext;
struct __declspec(uuid("678c0a9d-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoCompounds;
struct __declspec(uuid("678c0a9e-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoPhases;
struct __declspec(uuid("678c0a9f-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoPropertyRoutine;
struct __declspec(uuid("678c0aa0-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoEquilibriumRoutine;
struct __declspec(uuid("678c0aa1-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoUniversalConstant;
struct __declspec(uuid("678c0aa2-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoPropertyPackageManager;
enum eCapeCalculationCode : int;
enum eCapePhaseStatus : int;
struct __declspec(uuid("678c0998-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeUnit;
struct __declspec(uuid("678c0999-0093-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeUnitPort;
enum eCapePortType : int;
enum eCapePortDirection : int;
struct __declspec(uuid("678c099b-0093-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeUnitReport;
struct __declspec(uuid("678c09b1-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeUnitPortVariables;
struct __declspec(uuid("678c0afe-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeKineticReactionContext;
struct __declspec(uuid("678c0afd-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeElectrolyteReactionContext;
struct __declspec(uuid("678c0afc-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeReactionsPackageManager;
struct __declspec(uuid("678c0afb-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeReactionChemistry;
enum eCapeReactionType : int;
enum eCapeReactionRateBasis : int;
struct __declspec(uuid("678c0afa-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeReactionProperties;
struct __declspec(uuid("678c0af9-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeReactionsRoutine;
struct __declspec(uuid("678c0aa1-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeUnitTypeInfo;
enum eCapeUnitType : int;
struct __declspec(uuid("678c0aa0-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeThermoPetroFractions;
struct __declspec(uuid("3ad3c8f6-e6ec-4e63-b51e-0e9403535463"))
/* dual interface */ ICapeNumericMatrix;
enum eCapeMatrixOrdering : int;
enum eCapeMatrixType : int;
struct __declspec(uuid("678c09af-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericUnstructuredMatrix;
struct __declspec(uuid("9304e044-3311-41ed-8766-0123cb44038a"))
/* dual interface */ ICapeNumericESO;
struct __declspec(uuid("678c0b71-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericFullMatrix;
struct __declspec(uuid("678c0b72-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericBandedMatrix;
struct __declspec(uuid("678c0b74-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericLAESO;
struct __declspec(uuid("678c0b75-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericNLAESO;
struct __declspec(uuid("678c0b76-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericDAESO;
struct __declspec(uuid("678c0b77-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericGlobalESO;
struct __declspec(uuid("678c0b78-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericGlobalLAESO;
struct __declspec(uuid("678c0b79-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericGlobalNLAESO;
struct __declspec(uuid("678c0b7a-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericGlobalDAESO;
struct __declspec(uuid("678c0b7c-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericModel;
struct __declspec(uuid("678c0b81-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericEvent;
enum eCapeEventType : int;
struct __declspec(uuid("678c0b87-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericExternalEventInfo;
struct __declspec(uuid("678c0b7d-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericContinuousModel;
struct __declspec(uuid("678c0b7e-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericHierarchicalModel;
struct __declspec(uuid("678c0b7f-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericAggregateModel;
struct __declspec(uuid("678c0b80-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericSTN;
struct __declspec(uuid("678c0b86-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericEventInfo;
enum eCapeEventInfoKind : int;
struct __declspec(uuid("678c0b82-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericBasicEvent;
enum eCapeLogicalRelation : int;
struct __declspec(uuid("678c0b83-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericCompositeEvent;
enum eCapeLogicalOperator : int;
struct __declspec(uuid("678c0b84-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericBinaryEvent;
struct __declspec(uuid("678c0b85-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericUnaryEvent;
struct __declspec(uuid("678c0b88-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericInternalEventInfo;
struct __declspec(uuid("678c0b8a-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericSolver;
struct __declspec(uuid("678c0b8b-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericLASolver;
struct __declspec(uuid("678c0b8c-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericNLASolver;
struct __declspec(uuid("678c0b8d-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeNumericDAESolver;
struct __declspec(uuid("678c0b65-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTFlowsheetManager;
enum eCapeFlowsheetType : int;
struct __declspec(uuid("678c0b66-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTFlowsheet;
struct __declspec(uuid("678c0b67-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTProcessGraph;
enum eCapeSMSTStream : int;
struct __declspec(uuid("678c0b68-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTPartitionGraph;
struct __declspec(uuid("678c0b69-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTOpenPartitionGraph;
struct __declspec(uuid("678c0b6a-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTAnalysisManager;
enum eCapeAnalysisType : int;
struct __declspec(uuid("678c0b6b-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTAnalysis;
enum eCapeConvergenceCode : int;
enum eCapeConsistencyCode : int;
struct __declspec(uuid("678c0b6c-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTSequencing;
struct __declspec(uuid("678c0b6d-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTTearing;
struct __declspec(uuid("678c0b6e-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTPartitioning;
struct __declspec(uuid("678c0b70-0100-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeSMSTSMAnalysis;
struct __declspec(uuid("678c09cc-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeMINLP;
struct __declspec(uuid("678c09cd-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeMINLPSystem;
struct __declspec(uuid("678c09ce-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapeMINLPSolverManager;
struct __declspec(uuid("678c0b0f-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ECapeOutsideSolverScope;
struct __declspec(uuid("3ff0b24b-4299-4dac-a46e-7843728ad205"))
/* dual interface */ ECapeHessianInfoNotAvailable;
struct __declspec(uuid("678c09b2-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapePpdb;
struct __declspec(uuid("678c09b3-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapePpdbRegister;
struct __declspec(uuid("678c09b4-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapePpdbTables;
struct __declspec(uuid("678c09b5-7d66-11d2-a67d-00105a42887f"))
/* dual interface */ ICapePpdbModels;
struct __declspec(uuid("78defbbd-ed69-4f81-90a4-6b636ce13164"))
/* dual interface */ ICapePSPCollection;
struct __declspec(uuid("7a4d266a-e54d-4a7d-8877-632e89344fed"))
/* dual interface */ ICapePSPResource;
struct __declspec(uuid("85e4c4e2-57fc-43aa-a39a-78d392947080"))
/* dual interface */ ICapePSPRecipeEntity;
struct __declspec(uuid("dff34851-e60e-40dd-baa1-4fede69b3467"))
/* dual interface */ ICapePSPResourceRequirementCollection;
struct __declspec(uuid("8f3c13f5-0c69-42a2-9438-4299c630a0a4"))
/* dual interface */ ICapePSPResourceRequirement;
struct __declspec(uuid("b3245794-9a3e-4af7-a8ca-2308290106f0"))
/* dual interface */ ICapePSPRecipeEntityCollection;
struct __declspec(uuid("f3e9cf96-df8f-40f3-9543-e8d17cabbf96"))
/* dual interface */ ICapePSPSchedule;
struct __declspec(uuid("25bc241a-8110-4806-af7a-cb6cfa7b9a57"))
/* dual interface */ ICapePSPScheduleEntryCollection;
struct __declspec(uuid("638d84dc-84e9-4aea-83a4-0bb8852832e9"))
/* dual interface */ ICapePSPScheduleEntry;
struct __declspec(uuid("45a1b544-4be6-43f9-83a4-4a7cfee802fe"))
/* dual interface */ ICapePSPTransaction;
struct __declspec(uuid("1dd05fa1-eb10-4cbe-a94a-24f6ea7e7815"))
/* dual interface */ ICapePSPReport;
struct __declspec(uuid("e09e0b56-6a51-496f-b796-2c45c549b510"))
/* dual interface */ ICapePSPResourceCollection;
struct __declspec(uuid("033ac3ef-7449-4113-a10e-d70161b3fc22"))
/* dual interface */ ICapePSPScheduleCollection;
struct __declspec(uuid("052dafef-0f43-4f4d-88ab-50f6ad8fc0eb"))
/* dual interface */ ICapePSPTransactionCollection;
struct __declspec(uuid("f840eca2-941b-4af7-84db-47e2187430a2"))
/* dual interface */ ICapePSP;
typedef enum eCapeParamType CapeParamType;
typedef enum eCapeValidationStatus CapeValidationStatus;
typedef enum eCapeParamMode CapeParamMode;
typedef enum eCapeErrorInterfaceHR_tag CapeErrorInterfaceHR;
typedef enum eCapePortType CapePortType;
typedef enum eCapePortDirection CapePortDirection;
typedef enum eCapeReactionType CapeReactionType;
typedef enum eCapeReactionRateBasis CapeReactionRateBasis;
typedef enum eCapeUnitType CapeUnitType;
typedef enum eCapeFlowsheetType CapeFlowsheetType;
typedef enum eCapeSMSTStream CapeSMSTStream;
typedef enum eCapeAnalysisType CapeAnalysisType;
typedef enum eCapeConvergenceCode CapeConvergenceCode;
typedef enum eCapeConsistencyCode CapeConsistencyCode;
typedef VARIANT CapeArrayPpdbCompound;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(ICapeIdentification, __uuidof(ICapeIdentification));
_COM_SMARTPTR_TYPEDEF(ICapeCollection, __uuidof(ICapeCollection));
_COM_SMARTPTR_TYPEDEF(ICapeUtilities, __uuidof(ICapeUtilities));
_COM_SMARTPTR_TYPEDEF(ICapeParameterSpec, __uuidof(ICapeParameterSpec));
_COM_SMARTPTR_TYPEDEF(ICapeRealParameterSpec, __uuidof(ICapeRealParameterSpec));
_COM_SMARTPTR_TYPEDEF(ICapeIntegerParameterSpec, __uuidof(ICapeIntegerParameterSpec));
_COM_SMARTPTR_TYPEDEF(ICapeOptionParameterSpec, __uuidof(ICapeOptionParameterSpec));
_COM_SMARTPTR_TYPEDEF(ICapeBooleanParameterSpec, __uuidof(ICapeBooleanParameterSpec));
_COM_SMARTPTR_TYPEDEF(ICapeArrayParameterSpec, __uuidof(ICapeArrayParameterSpec));
_COM_SMARTPTR_TYPEDEF(ICapeParameter, __uuidof(ICapeParameter));
_COM_SMARTPTR_TYPEDEF(ECapeBoundaries, __uuidof(ECapeBoundaries));
_COM_SMARTPTR_TYPEDEF(ECapeRoot, __uuidof(ECapeRoot));
_COM_SMARTPTR_TYPEDEF(ECapeUser, __uuidof(ECapeUser));
_COM_SMARTPTR_TYPEDEF(ECapeUnknown, __uuidof(ECapeUnknown));
_COM_SMARTPTR_TYPEDEF(ECapeData, __uuidof(ECapeData));
_COM_SMARTPTR_TYPEDEF(ECapeLicenceError, __uuidof(ECapeLicenceError));
_COM_SMARTPTR_TYPEDEF(ECapeBadCOParameter, __uuidof(ECapeBadCOParameter));
_COM_SMARTPTR_TYPEDEF(ECapeBadArgument, __uuidof(ECapeBadArgument));
_COM_SMARTPTR_TYPEDEF(ECapeInvalidArgument, __uuidof(ECapeInvalidArgument));
_COM_SMARTPTR_TYPEDEF(ECapeOutOfBounds, __uuidof(ECapeOutOfBounds));
_COM_SMARTPTR_TYPEDEF(ECapeImplementation, __uuidof(ECapeImplementation));
_COM_SMARTPTR_TYPEDEF(ECapeNoImpl, __uuidof(ECapeNoImpl));
_COM_SMARTPTR_TYPEDEF(ECapeLimitedImpl, __uuidof(ECapeLimitedImpl));
_COM_SMARTPTR_TYPEDEF(ECapeComputation, __uuidof(ECapeComputation));
_COM_SMARTPTR_TYPEDEF(ECapeOutOfResources, __uuidof(ECapeOutOfResources));
_COM_SMARTPTR_TYPEDEF(ECapeNoMemory, __uuidof(ECapeNoMemory));
_COM_SMARTPTR_TYPEDEF(ECapeTimeOut, __uuidof(ECapeTimeOut));
_COM_SMARTPTR_TYPEDEF(ECapeFailedInitialisation, __uuidof(ECapeFailedInitialisation));
_COM_SMARTPTR_TYPEDEF(ECapeSolvingError, __uuidof(ECapeSolvingError));
_COM_SMARTPTR_TYPEDEF(ECapeBadInvOrder, __uuidof(ECapeBadInvOrder));
_COM_SMARTPTR_TYPEDEF(ECapeInvalidOperation, __uuidof(ECapeInvalidOperation));
_COM_SMARTPTR_TYPEDEF(ECapePersistence, __uuidof(ECapePersistence));
_COM_SMARTPTR_TYPEDEF(ECapeIllegalAccess, __uuidof(ECapeIllegalAccess));
_COM_SMARTPTR_TYPEDEF(ECapePersistenceNotFound, __uuidof(ECapePersistenceNotFound));
_COM_SMARTPTR_TYPEDEF(ECapePersistenceSystemError, __uuidof(ECapePersistenceSystemError));
_COM_SMARTPTR_TYPEDEF(ECapePersistenceOverflow, __uuidof(ECapePersistenceOverflow));
_COM_SMARTPTR_TYPEDEF(ECapeThrmPropertyNotAvailable, __uuidof(ECapeThrmPropertyNotAvailable));
_COM_SMARTPTR_TYPEDEF(ECapeErrorDummy, __uuidof(ECapeErrorDummy));
_COM_SMARTPTR_TYPEDEF(ICapeSimulationContext, __uuidof(ICapeSimulationContext));
_COM_SMARTPTR_TYPEDEF(ICapeDiagnostic, __uuidof(ICapeDiagnostic));
_COM_SMARTPTR_TYPEDEF(ICapeMaterialTemplateSystem, __uuidof(ICapeMaterialTemplateSystem));
_COM_SMARTPTR_TYPEDEF(ICapeCOSEUtilities, __uuidof(ICapeCOSEUtilities));
_COM_SMARTPTR_TYPEDEF(ICapeThermoReliability, __uuidof(ICapeThermoReliability));
_COM_SMARTPTR_TYPEDEF(ICapeThermoMaterialTemplate, __uuidof(ICapeThermoMaterialTemplate));
_COM_SMARTPTR_TYPEDEF(ICapeThermoMaterialObject, __uuidof(ICapeThermoMaterialObject));
_COM_SMARTPTR_TYPEDEF(ICapeThermoSystem, __uuidof(ICapeThermoSystem));
_COM_SMARTPTR_TYPEDEF(ICapeThermoPropertyPackage, __uuidof(ICapeThermoPropertyPackage));
_COM_SMARTPTR_TYPEDEF(ICapeThermoEquilibriumServer, __uuidof(ICapeThermoEquilibriumServer));
_COM_SMARTPTR_TYPEDEF(ICapeThermoCalculationRoutine, __uuidof(ICapeThermoCalculationRoutine));
_COM_SMARTPTR_TYPEDEF(ICapeThermoMaterial, __uuidof(ICapeThermoMaterial));
_COM_SMARTPTR_TYPEDEF(ICapeThermoMaterialContext, __uuidof(ICapeThermoMaterialContext));
_COM_SMARTPTR_TYPEDEF(ICapeThermoCompounds, __uuidof(ICapeThermoCompounds));
_COM_SMARTPTR_TYPEDEF(ICapeThermoPhases, __uuidof(ICapeThermoPhases));
_COM_SMARTPTR_TYPEDEF(ICapeThermoPropertyRoutine, __uuidof(ICapeThermoPropertyRoutine));
_COM_SMARTPTR_TYPEDEF(ICapeThermoEquilibriumRoutine, __uuidof(ICapeThermoEquilibriumRoutine));
_COM_SMARTPTR_TYPEDEF(ICapeThermoUniversalConstant, __uuidof(ICapeThermoUniversalConstant));
_COM_SMARTPTR_TYPEDEF(ICapeThermoPropertyPackageManager, __uuidof(ICapeThermoPropertyPackageManager));
_COM_SMARTPTR_TYPEDEF(ICapeUnit, __uuidof(ICapeUnit));
_COM_SMARTPTR_TYPEDEF(ICapeUnitPort, __uuidof(ICapeUnitPort));
_COM_SMARTPTR_TYPEDEF(ICapeUnitReport, __uuidof(ICapeUnitReport));
_COM_SMARTPTR_TYPEDEF(ICapeUnitPortVariables, __uuidof(ICapeUnitPortVariables));
_COM_SMARTPTR_TYPEDEF(ICapeKineticReactionContext, __uuidof(ICapeKineticReactionContext));
_COM_SMARTPTR_TYPEDEF(ICapeElectrolyteReactionContext, __uuidof(ICapeElectrolyteReactionContext));
_COM_SMARTPTR_TYPEDEF(ICapeReactionsPackageManager, __uuidof(ICapeReactionsPackageManager));
_COM_SMARTPTR_TYPEDEF(ICapeReactionChemistry, __uuidof(ICapeReactionChemistry));
_COM_SMARTPTR_TYPEDEF(ICapeReactionProperties, __uuidof(ICapeReactionProperties));
_COM_SMARTPTR_TYPEDEF(ICapeReactionsRoutine, __uuidof(ICapeReactionsRoutine));
_COM_SMARTPTR_TYPEDEF(ICapeUnitTypeInfo, __uuidof(ICapeUnitTypeInfo));
_COM_SMARTPTR_TYPEDEF(ICapeThermoPetroFractions, __uuidof(ICapeThermoPetroFractions));
_COM_SMARTPTR_TYPEDEF(ICapeNumericMatrix, __uuidof(ICapeNumericMatrix));
_COM_SMARTPTR_TYPEDEF(ICapeNumericUnstructuredMatrix, __uuidof(ICapeNumericUnstructuredMatrix));
_COM_SMARTPTR_TYPEDEF(ICapeNumericESO, __uuidof(ICapeNumericESO));
_COM_SMARTPTR_TYPEDEF(ICapeNumericFullMatrix, __uuidof(ICapeNumericFullMatrix));
_COM_SMARTPTR_TYPEDEF(ICapeNumericBandedMatrix, __uuidof(ICapeNumericBandedMatrix));
_COM_SMARTPTR_TYPEDEF(ICapeNumericLAESO, __uuidof(ICapeNumericLAESO));
_COM_SMARTPTR_TYPEDEF(ICapeNumericNLAESO, __uuidof(ICapeNumericNLAESO));
_COM_SMARTPTR_TYPEDEF(ICapeNumericDAESO, __uuidof(ICapeNumericDAESO));
_COM_SMARTPTR_TYPEDEF(ICapeNumericGlobalESO, __uuidof(ICapeNumericGlobalESO));
_COM_SMARTPTR_TYPEDEF(ICapeNumericGlobalLAESO, __uuidof(ICapeNumericGlobalLAESO));
_COM_SMARTPTR_TYPEDEF(ICapeNumericGlobalNLAESO, __uuidof(ICapeNumericGlobalNLAESO));
_COM_SMARTPTR_TYPEDEF(ICapeNumericGlobalDAESO, __uuidof(ICapeNumericGlobalDAESO));
_COM_SMARTPTR_TYPEDEF(ICapeNumericEvent, __uuidof(ICapeNumericEvent));
_COM_SMARTPTR_TYPEDEF(ICapeNumericExternalEventInfo, __uuidof(ICapeNumericExternalEventInfo));
_COM_SMARTPTR_TYPEDEF(ICapeNumericModel, __uuidof(ICapeNumericModel));
_COM_SMARTPTR_TYPEDEF(ICapeNumericContinuousModel, __uuidof(ICapeNumericContinuousModel));
_COM_SMARTPTR_TYPEDEF(ICapeNumericHierarchicalModel, __uuidof(ICapeNumericHierarchicalModel));
_COM_SMARTPTR_TYPEDEF(ICapeNumericAggregateModel, __uuidof(ICapeNumericAggregateModel));
_COM_SMARTPTR_TYPEDEF(ICapeNumericEventInfo, __uuidof(ICapeNumericEventInfo));
_COM_SMARTPTR_TYPEDEF(ICapeNumericSTN, __uuidof(ICapeNumericSTN));
_COM_SMARTPTR_TYPEDEF(ICapeNumericBasicEvent, __uuidof(ICapeNumericBasicEvent));
_COM_SMARTPTR_TYPEDEF(ICapeNumericCompositeEvent, __uuidof(ICapeNumericCompositeEvent));
_COM_SMARTPTR_TYPEDEF(ICapeNumericBinaryEvent, __uuidof(ICapeNumericBinaryEvent));
_COM_SMARTPTR_TYPEDEF(ICapeNumericUnaryEvent, __uuidof(ICapeNumericUnaryEvent));
_COM_SMARTPTR_TYPEDEF(ICapeNumericInternalEventInfo, __uuidof(ICapeNumericInternalEventInfo));
_COM_SMARTPTR_TYPEDEF(ICapeNumericSolver, __uuidof(ICapeNumericSolver));
_COM_SMARTPTR_TYPEDEF(ICapeNumericLASolver, __uuidof(ICapeNumericLASolver));
_COM_SMARTPTR_TYPEDEF(ICapeNumericNLASolver, __uuidof(ICapeNumericNLASolver));
_COM_SMARTPTR_TYPEDEF(ICapeNumericDAESolver, __uuidof(ICapeNumericDAESolver));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTFlowsheetManager, __uuidof(ICapeSMSTFlowsheetManager));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTFlowsheet, __uuidof(ICapeSMSTFlowsheet));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTProcessGraph, __uuidof(ICapeSMSTProcessGraph));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTPartitionGraph, __uuidof(ICapeSMSTPartitionGraph));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTOpenPartitionGraph, __uuidof(ICapeSMSTOpenPartitionGraph));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTAnalysisManager, __uuidof(ICapeSMSTAnalysisManager));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTAnalysis, __uuidof(ICapeSMSTAnalysis));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTSequencing, __uuidof(ICapeSMSTSequencing));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTTearing, __uuidof(ICapeSMSTTearing));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTPartitioning, __uuidof(ICapeSMSTPartitioning));
_COM_SMARTPTR_TYPEDEF(ICapeSMSTSMAnalysis, __uuidof(ICapeSMSTSMAnalysis));
_COM_SMARTPTR_TYPEDEF(ICapeMINLP, __uuidof(ICapeMINLP));
_COM_SMARTPTR_TYPEDEF(ICapeMINLPSystem, __uuidof(ICapeMINLPSystem));
_COM_SMARTPTR_TYPEDEF(ICapeMINLPSolverManager, __uuidof(ICapeMINLPSolverManager));
_COM_SMARTPTR_TYPEDEF(ECapeOutsideSolverScope, __uuidof(ECapeOutsideSolverScope));
_COM_SMARTPTR_TYPEDEF(ECapeHessianInfoNotAvailable, __uuidof(ECapeHessianInfoNotAvailable));
_COM_SMARTPTR_TYPEDEF(ICapePpdb, __uuidof(ICapePpdb));
_COM_SMARTPTR_TYPEDEF(ICapePpdbRegister, __uuidof(ICapePpdbRegister));
_COM_SMARTPTR_TYPEDEF(ICapePpdbTables, __uuidof(ICapePpdbTables));
_COM_SMARTPTR_TYPEDEF(ICapePpdbModels, __uuidof(ICapePpdbModels));
_COM_SMARTPTR_TYPEDEF(ICapePSPCollection, __uuidof(ICapePSPCollection));
_COM_SMARTPTR_TYPEDEF(ICapePSPResource, __uuidof(ICapePSPResource));
_COM_SMARTPTR_TYPEDEF(ICapePSPResourceRequirement, __uuidof(ICapePSPResourceRequirement));
_COM_SMARTPTR_TYPEDEF(ICapePSPResourceRequirementCollection, __uuidof(ICapePSPResourceRequirementCollection));
_COM_SMARTPTR_TYPEDEF(ICapePSPTransaction, __uuidof(ICapePSPTransaction));
_COM_SMARTPTR_TYPEDEF(ICapePSPReport, __uuidof(ICapePSPReport));
_COM_SMARTPTR_TYPEDEF(ICapePSPResourceCollection, __uuidof(ICapePSPResourceCollection));
_COM_SMARTPTR_TYPEDEF(ICapePSPTransactionCollection, __uuidof(ICapePSPTransactionCollection));
_COM_SMARTPTR_TYPEDEF(ICapePSPRecipeEntity, __uuidof(ICapePSPRecipeEntity));
_COM_SMARTPTR_TYPEDEF(ICapePSPRecipeEntityCollection, __uuidof(ICapePSPRecipeEntityCollection));
_COM_SMARTPTR_TYPEDEF(ICapePSPSchedule, __uuidof(ICapePSPSchedule));
_COM_SMARTPTR_TYPEDEF(ICapePSPScheduleCollection, __uuidof(ICapePSPScheduleCollection));
_COM_SMARTPTR_TYPEDEF(ICapePSP, __uuidof(ICapePSP));
_COM_SMARTPTR_TYPEDEF(ICapePSPScheduleEntryCollection, __uuidof(ICapePSPScheduleEntryCollection));
_COM_SMARTPTR_TYPEDEF(ICapePSPScheduleEntry, __uuidof(ICapePSPScheduleEntry));

//
// Type library items
//

struct __declspec(uuid("678c0990-7d66-11d2-a67d-00105a42887f"))
ICapeIdentification : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComponentName (
        /*[out,retval]*/ BSTR * name ) = 0;
      virtual HRESULT __stdcall put_ComponentName (
        /*[in]*/ BSTR name ) = 0;
      virtual HRESULT __stdcall get_ComponentDescription (
        /*[out,retval]*/ BSTR * desc ) = 0;
      virtual HRESULT __stdcall put_ComponentDescription (
        /*[in]*/ BSTR desc ) = 0;
};

struct __declspec(uuid("678c099a-0093-11d2-a67d-00105a42887f"))
ICapeCollection : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall Item (
        /*[in]*/ VARIANT id,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall Count (
        /*[out,retval]*/ long * itemsCount ) = 0;
};

struct __declspec(uuid("678c0a9b-0100-11d2-a67d-00105a42887f"))
ICapeUtilities : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_parameters (
        /*[out,retval]*/ IDispatch * * parameters ) = 0;
      virtual HRESULT __stdcall put_simulationContext (
        /*[in]*/ IDispatch * _arg1 ) = 0;
      virtual HRESULT __stdcall Initialize ( ) = 0;
      virtual HRESULT __stdcall Terminate ( ) = 0;
      virtual HRESULT __stdcall Edit ( ) = 0;
};

struct __declspec(uuid("678c099c-0093-11d2-a67d-00105a42887f"))
ICapeParameterSpec : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ CapeParamType * Type ) = 0;
      virtual HRESULT __stdcall get_Dimensionality (
        /*[out,retval]*/ VARIANT * dim ) = 0;
};

enum eCapeParamType : int
{
    CAPE_REAL = 0,
    CAPE_INT = 1,
    CAPE_OPTION = 2,
    CAPE_BOOLEAN = 3,
    CAPE_ARRAY = 4
};

struct __declspec(uuid("678c099d-0093-11d2-a67d-00105a42887f"))
ICapeRealParameterSpec : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ double * DefaultValue ) = 0;
      virtual HRESULT __stdcall get_LowerBound (
        /*[out,retval]*/ double * lBound ) = 0;
      virtual HRESULT __stdcall get_UpperBound (
        /*[out,retval]*/ double * uBound ) = 0;
      virtual HRESULT __stdcall Validate (
        /*[in]*/ double value,
        /*[in,out]*/ BSTR * message,
        /*[out,retval]*/ VARIANT_BOOL * isOK ) = 0;
};

struct __declspec(uuid("678c099e-0093-11d2-a67d-00105a42887f"))
ICapeIntegerParameterSpec : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_LowerBound (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_UpperBound (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall Validate (
        /*[in]*/ long value,
        /*[in,out]*/ BSTR * message,
        /*[out,retval]*/ VARIANT_BOOL * isOK ) = 0;
};

struct __declspec(uuid("678c099f-0093-11d2-a67d-00105a42887f"))
ICapeOptionParameterSpec : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ BSTR * DefaultValue ) = 0;
      virtual HRESULT __stdcall get_OptionList (
        /*[out,retval]*/ VARIANT * optionNames ) = 0;
      virtual HRESULT __stdcall get_RestrictedToList (
        /*[out,retval]*/ VARIANT_BOOL * restricted ) = 0;
      virtual HRESULT __stdcall Validate (
        /*[in]*/ BSTR value,
        /*[in,out]*/ BSTR * message,
        /*[out,retval]*/ VARIANT_BOOL * isOK ) = 0;
};

struct __declspec(uuid("678c09a8-0093-11d2-a67d-00105a42887f"))
ICapeBooleanParameterSpec : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ VARIANT_BOOL * DefaultValue ) = 0;
      virtual HRESULT __stdcall Validate (
        /*[in]*/ VARIANT_BOOL value,
        /*[in,out]*/ BSTR * message,
        /*[out,retval]*/ VARIANT_BOOL * isOK ) = 0;
};

struct __declspec(uuid("678c09a9-0093-11d2-a67d-00105a42887f"))
ICapeArrayParameterSpec : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumDimensions (
        /*[out,retval]*/ long * DefaultValue ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ VARIANT * Size ) = 0;
      virtual HRESULT __stdcall get_ItemsSpecifications (
        /*[out,retval]*/ VARIANT * specs ) = 0;
      virtual HRESULT __stdcall Validate (
        /*[in]*/ VARIANT value,
        /*[in,out]*/ VARIANT * message,
        /*[out,retval]*/ VARIANT * isOK ) = 0;
};

enum eCapeValidationStatus : int
{
    CAPE_NOT_VALIDATED = 0,
    CAPE_INVALID = 1,
    CAPE_VALID = 2
};

struct __declspec(uuid("678c09a0-0093-11d2-a67d-00105a42887f"))
ICapeParameter : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Specification (
        /*[out,retval]*/ IDispatch * * spec ) = 0;
      virtual HRESULT __stdcall get_value (
        /*[out,retval]*/ VARIANT * value ) = 0;
      virtual HRESULT __stdcall put_value (
        /*[in]*/ VARIANT value ) = 0;
      virtual HRESULT __stdcall get_ValStatus (
        /*[out,retval]*/ CapeValidationStatus * ValStatus ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ CapeParamMode * Mode ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ CapeParamMode Mode ) = 0;
      virtual HRESULT __stdcall Validate (
        /*[in,out]*/ BSTR * message,
        /*[out,retval]*/ VARIANT_BOOL * isOK ) = 0;
      virtual HRESULT __stdcall Reset ( ) = 0;
};

enum eCapeParamMode : int
{
    CAPE_INPUT = 0,
    CAPE_OUTPUT = 1,
    CAPE_INPUT_OUTPUT = 2
};

struct __declspec(uuid("678c0b29-7d66-11d2-a67d-00105a42887f"))
ECapeBoundaries : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LowerBound (
        /*[out,retval]*/ double * LowerBound ) = 0;
      virtual HRESULT __stdcall get_UpperBound (
        /*[out,retval]*/ double * UpperBound ) = 0;
      virtual HRESULT __stdcall get_value (
        /*[out,retval]*/ double * value ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * Type ) = 0;
};

struct __declspec(uuid("678c0b10-7d66-11d2-a67d-00105a42887f"))
ECapeRoot : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_name (
        /*[out,retval]*/ BSTR * name ) = 0;
};

struct __declspec(uuid("678c0b11-7d66-11d2-a67d-00105a42887f"))
ECapeUser : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_code (
        /*[out,retval]*/ long * code ) = 0;
      virtual HRESULT __stdcall get_description (
        /*[out,retval]*/ BSTR * description ) = 0;
      virtual HRESULT __stdcall get_scope (
        /*[out,retval]*/ BSTR * scope ) = 0;
      virtual HRESULT __stdcall get_interfaceName (
        /*[out,retval]*/ BSTR * interfaceName ) = 0;
      virtual HRESULT __stdcall get_operation (
        /*[out,retval]*/ BSTR * operation ) = 0;
      virtual HRESULT __stdcall get_moreInfo (
        /*[out,retval]*/ BSTR * moreInfo ) = 0;
};

struct __declspec(uuid("678c0b12-7d66-11d2-a67d-00105a42887f"))
ECapeUnknown : IDispatch
{};

struct __declspec(uuid("678c0b13-7d66-11d2-a67d-00105a42887f"))
ECapeData : IDispatch
{};

struct __declspec(uuid("678c0b14-7d66-11d2-a67d-00105a42887f"))
ECapeLicenceError : IDispatch
{};

struct __declspec(uuid("678c0b15-7d66-11d2-a67d-00105a42887f"))
ECapeBadCOParameter : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_parameterName (
        /*[out,retval]*/ BSTR * parameterName ) = 0;
      virtual HRESULT __stdcall get_parameter (
        /*[out,retval]*/ IDispatch * * parameter ) = 0;
};

struct __declspec(uuid("e29e42b3-e481-45c6-a737-78f4a7fc0391"))
ECapeBadArgument : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_position (
        /*[out,retval]*/ short * position ) = 0;
};

struct __declspec(uuid("678c0b17-7d66-11d2-a67d-00105a42887f"))
ECapeInvalidArgument : IDispatch
{};

struct __declspec(uuid("678c0b18-7d66-11d2-a67d-00105a42887f"))
ECapeOutOfBounds : IDispatch
{};

struct __declspec(uuid("678c0b19-7d66-11d2-a67d-00105a42887f"))
ECapeImplementation : IDispatch
{};

struct __declspec(uuid("678c0b1a-7d66-11d2-a67d-00105a42887f"))
ECapeNoImpl : IDispatch
{};

struct __declspec(uuid("678c0b1b-7d66-11d2-a67d-00105a42887f"))
ECapeLimitedImpl : IDispatch
{};

struct __declspec(uuid("678c0b1c-7d66-11d2-a67d-00105a42887f"))
ECapeComputation : IDispatch
{};

struct __declspec(uuid("678c0b1d-7d66-11d2-a67d-00105a42887f"))
ECapeOutOfResources : IDispatch
{};

struct __declspec(uuid("678c0b1e-7d66-11d2-a67d-00105a42887f"))
ECapeNoMemory : IDispatch
{};

struct __declspec(uuid("678c0b1f-7d66-11d2-a67d-00105a42887f"))
ECapeTimeOut : IDispatch
{};

struct __declspec(uuid("678c0b20-7d66-11d2-a67d-00105a42887f"))
ECapeFailedInitialisation : IDispatch
{};

struct __declspec(uuid("678c0b21-7d66-11d2-a67d-00105a42887f"))
ECapeSolvingError : IDispatch
{};

struct __declspec(uuid("678c0b22-7d66-11d2-a67d-00105a42887f"))
ECapeBadInvOrder : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_requestedOperation (
        /*[out,retval]*/ BSTR * requestedOperation ) = 0;
};

struct __declspec(uuid("678c0b23-7d66-11d2-a67d-00105a42887f"))
ECapeInvalidOperation : IDispatch
{};

struct __declspec(uuid("678c0b24-7d66-11d2-a67d-00105a42887f"))
ECapePersistence : IDispatch
{};

struct __declspec(uuid("678c0b25-7d66-11d2-a67d-00105a42887f"))
ECapeIllegalAccess : IDispatch
{};

struct __declspec(uuid("678c0b26-7d66-11d2-a67d-00105a42887f"))
ECapePersistenceNotFound : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_itemName (
        /*[out,retval]*/ BSTR * itemName ) = 0;
};

struct __declspec(uuid("678c0b27-7d66-11d2-a67d-00105a42887f"))
ECapePersistenceSystemError : IDispatch
{};

struct __declspec(uuid("678c0b28-7d66-11d2-a67d-00105a42887f"))
ECapePersistenceOverflow : IDispatch
{};

struct __declspec(uuid("678c09b6-7d66-11d2-a67d-00105a42887f"))
ECapeThrmPropertyNotAvailable : IDispatch
{};

struct __declspec(uuid("678c0b07-7d66-11d2-a67d-00105a42887f"))
ECapeErrorDummy : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_dummy (
        /*[out,retval]*/ CapeErrorInterfaceHR * name ) = 0;
};

enum eCapeErrorInterfaceHR_tag : int
{
    ECapeUnknownHR = -2147220223,
    ECapeDataHR = -2147220222,
    ECapeLicenceErrorHR = -2147220221,
    ECapeBadCOParameterHR = -2147220220,
    ECapeBadArgumentHR = -2147220219,
    ECapeInvalidArgumentHR = -2147220218,
    ECapeOutOfBoundsHR = -2147220217,
    ECapeImplementationHR = -2147220216,
    ECapeNoImplHR = -2147220215,
    ECapeLimitedImplHR = -2147220214,
    ECapeComputationHR = -2147220213,
    ECapeOutOfResourcesHR = -2147220212,
    ECapeNoMemoryHR = -2147220211,
    ECapeTimeOutHR = -2147220210,
    ECapeFailedInitialisationHR = -2147220209,
    ECapeSolvingErrorHR = -2147220208,
    ECapeBadInvOrderHR = -2147220207,
    ECapeInvalidOperationHR = -2147220206,
    ECapePersistenceHR = -2147220205,
    ECapeIllegalAccessHR = -2147220204,
    ECapePersistenceNotFoundHR = -2147220203,
    ECapePersistenceSystemErrorHR = -2147220202,
    ECapePersistenceOverflowHR = -2147220201,
    ECapeOutsideSolverScopeHR = -2147220200,
    ECapeHessianInfoNotAvailableHR = -2147220199,
    ECapeThrmPropertyNotAvailableHR = -2147220198
};

struct __declspec(uuid("678c0a9c-0100-11d2-a67d-00105a42887f"))
ICapeSimulationContext : IDispatch
{};

struct __declspec(uuid("678c0a9d-0100-11d2-a67d-00105a42887f"))
ICapeDiagnostic : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall PopUpMessage (
        /*[in]*/ BSTR message ) = 0;
      virtual HRESULT __stdcall LogMessage (
        /*[in]*/ BSTR message ) = 0;
};

struct __declspec(uuid("678c0a9e-0100-11d2-a67d-00105a42887f"))
ICapeMaterialTemplateSystem : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaterialTemplates (
        /*[out,retval]*/ VARIANT * TemplateNames ) = 0;
      virtual HRESULT __stdcall CreateMaterialTemplate (
        /*[in]*/ BSTR materialTemplateName,
        /*[out,retval]*/ IDispatch * * MaterialTemplate ) = 0;
};

struct __declspec(uuid("678c0a9f-0100-11d2-a67d-00105a42887f"))
ICapeCOSEUtilities : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NamedValueList (
        /*[out,retval]*/ VARIANT * NamedValues ) = 0;
      virtual HRESULT __stdcall get_NamedValue (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ VARIANT * NamedValue ) = 0;
};

struct __declspec(uuid("678c0992-7d66-11d2-a67d-00105a42887f"))
ICapeThermoReliability : IDispatch
{};

struct __declspec(uuid("678c0993-7d66-11d2-a67d-00105a42887f"))
ICapeThermoMaterialTemplate : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CreateMaterialObject (
        /*[out,retval]*/ IDispatch * * materialObject ) = 0;
      virtual HRESULT __stdcall SetProp (
        /*[in]*/ BSTR property,
        /*[in]*/ VARIANT values ) = 0;
};

struct __declspec(uuid("678c0994-7d66-11d2-a67d-00105a42887f"))
ICapeThermoMaterialObject : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComponentIds (
        /*[out,retval]*/ VARIANT * compIds ) = 0;
      virtual HRESULT __stdcall get_PhaseIds (
        /*[out,retval]*/ VARIANT * PhaseIds ) = 0;
      virtual HRESULT __stdcall GetUniversalConstant (
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * propVals ) = 0;
      virtual HRESULT __stdcall GetComponentConstant (
        /*[in]*/ VARIANT props,
        /*[in]*/ VARIANT compIds,
        /*[out,retval]*/ VARIANT * propVals ) = 0;
      virtual HRESULT __stdcall CalcProp (
        /*[in]*/ VARIANT props,
        /*[in]*/ VARIANT phases,
        /*[in]*/ BSTR calcType ) = 0;
      virtual HRESULT __stdcall GetProp (
        /*[in]*/ BSTR property,
        /*[in]*/ BSTR phase,
        /*[in]*/ VARIANT compIds,
        /*[in]*/ BSTR calcType,
        /*[in]*/ BSTR basis,
        /*[out,retval]*/ VARIANT * results ) = 0;
      virtual HRESULT __stdcall SetProp (
        /*[in]*/ BSTR property,
        /*[in]*/ BSTR phase,
        /*[in]*/ VARIANT compIds,
        /*[in]*/ BSTR calcType,
        /*[in]*/ BSTR basis,
        /*[in]*/ VARIANT values ) = 0;
      virtual HRESULT __stdcall CalcEquilibrium (
        /*[in]*/ BSTR flashType,
        /*[in]*/ VARIANT props ) = 0;
      virtual HRESULT __stdcall SetIndependentVar (
        /*[in]*/ VARIANT indVars,
        /*[in]*/ VARIANT values ) = 0;
      virtual HRESULT __stdcall GetIndependentVar (
        /*[in]*/ VARIANT indVars,
        /*[out,retval]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall PropCheck (
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * valid ) = 0;
      virtual HRESULT __stdcall AvailableProps (
        /*[out,retval]*/ VARIANT * props ) = 0;
      virtual HRESULT __stdcall RemoveResults (
        /*[in]*/ VARIANT props ) = 0;
      virtual HRESULT __stdcall CreateMaterialObject (
        /*[out,retval]*/ IDispatch * * materialObject ) = 0;
      virtual HRESULT __stdcall Duplicate (
        /*[out,retval]*/ IDispatch * * clone ) = 0;
      virtual HRESULT __stdcall ValidityCheck (
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * relList ) = 0;
      virtual HRESULT __stdcall GetPropList (
        /*[out,retval]*/ VARIANT * props ) = 0;
      virtual HRESULT __stdcall GetNumComponents (
        /*[out,retval]*/ long * numComp ) = 0;
};

struct __declspec(uuid("678c0995-7d66-11d2-a67d-00105a42887f"))
ICapeThermoSystem : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetPropertyPackages (
        /*[out,retval]*/ VARIANT * propPackageList ) = 0;
      virtual HRESULT __stdcall ResolvePropertyPackage (
        /*[in]*/ BSTR propertyPackage,
        /*[out,retval]*/ IDispatch * * propPackObject ) = 0;
};

struct __declspec(uuid("678c0996-7d66-11d2-a67d-00105a42887f"))
ICapeThermoPropertyPackage : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetPhaseList (
        /*[out,retval]*/ VARIANT * phases ) = 0;
      virtual HRESULT __stdcall GetComponentList (
        /*[in,out]*/ VARIANT * compIds,
        /*[in,out]*/ VARIANT * formulae,
        /*[in,out]*/ VARIANT * name,
        /*[in,out]*/ VARIANT * boilTemps,
        /*[in,out]*/ VARIANT * molwt,
        /*[in,out]*/ VARIANT * casno ) = 0;
      virtual HRESULT __stdcall GetUniversalConstant (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * propVals ) = 0;
      virtual HRESULT __stdcall GetComponentConstant (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * propVals ) = 0;
      virtual HRESULT __stdcall CalcProp (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ VARIANT props,
        /*[in]*/ VARIANT phases,
        /*[in]*/ BSTR calcType ) = 0;
      virtual HRESULT __stdcall CalcEquilibrium (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ BSTR flashType,
        /*[in]*/ VARIANT props ) = 0;
      virtual HRESULT __stdcall PropCheck (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * valid ) = 0;
      virtual HRESULT __stdcall ValidityCheck (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * valid ) = 0;
      virtual HRESULT __stdcall GetPropList (
        /*[out,retval]*/ VARIANT * props ) = 0;
};

struct __declspec(uuid("678c0997-7d66-11d2-a67d-00105a42887f"))
ICapeThermoEquilibriumServer : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CalcEquilibrium (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ BSTR flashType,
        /*[in]*/ VARIANT props ) = 0;
      virtual HRESULT __stdcall PropCheck (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ BSTR flashType,
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * valid ) = 0;
      virtual HRESULT __stdcall ValidityCheck (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * relList ) = 0;
      virtual HRESULT __stdcall PropList (
        /*[in,out]*/ VARIANT * flashType,
        /*[in,out]*/ VARIANT * props,
        /*[in,out]*/ VARIANT * phases,
        /*[in,out]*/ VARIANT * calcType ) = 0;
};

struct __declspec(uuid("678c0991-7d66-11d2-a67d-00105a42887f"))
ICapeThermoCalculationRoutine : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CalcProp (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ VARIANT props,
        /*[in]*/ VARIANT phases,
        /*[in]*/ BSTR calcType ) = 0;
      virtual HRESULT __stdcall PropCheck (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * valid ) = 0;
      virtual HRESULT __stdcall PropList (
        /*[in,out]*/ VARIANT * props,
        /*[in,out]*/ VARIANT * phases,
        /*[in,out]*/ VARIANT * calcType ) = 0;
      virtual HRESULT __stdcall ValidityCheck (
        /*[in]*/ IDispatch * materialObject,
        /*[in]*/ VARIANT props,
        /*[out,retval]*/ VARIANT * relList ) = 0;
};

struct __declspec(uuid("678c0a9b-7d66-11d2-a67d-00105a42887f"))
ICapeThermoMaterial : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall ClearAllProps ( ) = 0;
      virtual HRESULT __stdcall CopyFromMaterial (
        /*[in]*/ IDispatch * * source ) = 0;
      virtual HRESULT __stdcall CreateMaterial (
        /*[out,retval]*/ IDispatch * * materialObject ) = 0;
      virtual HRESULT __stdcall GetOverallProp (
        /*[in]*/ BSTR property,
        /*[in]*/ BSTR basis,
        /*[in,out]*/ VARIANT * results ) = 0;
      virtual HRESULT __stdcall GetOverallTPFraction (
        /*[in,out]*/ double * temperature,
        /*[in,out]*/ double * pressure,
        /*[in,out]*/ VARIANT * composition ) = 0;
      virtual HRESULT __stdcall GetPresentPhases (
        /*[in,out]*/ VARIANT * phaseLabels,
        /*[in,out]*/ VARIANT * phaseStatus ) = 0;
      virtual HRESULT __stdcall GetSinglePhaseProp (
        /*[in]*/ BSTR property,
        /*[in]*/ BSTR phaseLabel,
        /*[in]*/ BSTR basis,
        /*[in,out]*/ VARIANT * results ) = 0;
      virtual HRESULT __stdcall GetTPFraction (
        /*[in]*/ BSTR phaseLabel,
        /*[in,out]*/ double * temperature,
        /*[in,out]*/ double * pressure,
        /*[in,out]*/ VARIANT * composition ) = 0;
      virtual HRESULT __stdcall GetTwoPhaseProp (
        /*[in]*/ BSTR property,
        /*[in]*/ VARIANT phaseLabels,
        /*[in]*/ BSTR basis,
        /*[in,out]*/ VARIANT * results ) = 0;
      virtual HRESULT __stdcall SetOverallProp (
        /*[in]*/ BSTR property,
        /*[in]*/ BSTR basis,
        /*[in]*/ VARIANT values ) = 0;
      virtual HRESULT __stdcall SetPresentPhases (
        /*[in]*/ VARIANT phaseLabels,
        /*[in]*/ VARIANT phaseStatus ) = 0;
      virtual HRESULT __stdcall SetSinglePhaseProp (
        /*[in]*/ BSTR property,
        /*[in]*/ BSTR phaseLabel,
        /*[in]*/ BSTR basis,
        /*[in]*/ VARIANT values ) = 0;
      virtual HRESULT __stdcall SetTwoPhaseProp (
        /*[in]*/ BSTR property,
        /*[in]*/ VARIANT phaseLabels,
        /*[in]*/ BSTR basis,
        /*[in]*/ VARIANT values ) = 0;
};

struct __declspec(uuid("678c0a9c-7d66-11d2-a67d-00105a42887f"))
ICapeThermoMaterialContext : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall SetMaterial (
        /*[in]*/ IDispatch * material ) = 0;
      virtual HRESULT __stdcall UnsetMaterial ( ) = 0;
};

struct __declspec(uuid("678c0a9d-7d66-11d2-a67d-00105a42887f"))
ICapeThermoCompounds : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetCompoundConstant (
        /*[in]*/ VARIANT props,
        /*[in]*/ VARIANT compIds,
        /*[out,retval]*/ VARIANT * propVals ) = 0;
      virtual HRESULT __stdcall GetCompoundList (
        /*[in,out]*/ VARIANT * compIds,
        /*[in,out]*/ VARIANT * formulae,
        /*[in,out]*/ VARIANT * names,
        /*[in,out]*/ VARIANT * boilTemps,
        /*[in,out]*/ VARIANT * molwts,
        /*[in,out]*/ VARIANT * casnos ) = 0;
      virtual HRESULT __stdcall GetConstPropList (
        /*[out,retval]*/ VARIANT * props ) = 0;
      virtual HRESULT __stdcall GetNumCompounds (
        /*[out,retval]*/ long * num ) = 0;
      virtual HRESULT __stdcall GetPDependentProperty (
        /*[in]*/ VARIANT props,
        /*[in]*/ double pressure,
        /*[in]*/ VARIANT compIds,
        /*[in,out]*/ VARIANT * propVals ) = 0;
      virtual HRESULT __stdcall GetPDependentPropList (
        /*[out,retval]*/ VARIANT * props ) = 0;
      virtual HRESULT __stdcall GetTDependentProperty (
        /*[in]*/ VARIANT props,
        /*[in]*/ double temperature,
        /*[in]*/ VARIANT compIds,
        /*[in,out]*/ VARIANT * propVals ) = 0;
      virtual HRESULT __stdcall GetTDependentPropList (
        /*[out,retval]*/ VARIANT * props ) = 0;
};

struct __declspec(uuid("678c0a9e-7d66-11d2-a67d-00105a42887f"))
ICapeThermoPhases : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetNumPhases (
        /*[out,retval]*/ long * num ) = 0;
      virtual HRESULT __stdcall GetPhaseInfo (
        /*[in]*/ BSTR phaseLabel,
        /*[in]*/ BSTR phaseAttribute,
        /*[out,retval]*/ VARIANT * value ) = 0;
      virtual HRESULT __stdcall GetPhaseList (
        /*[in,out]*/ VARIANT * phaseLabels,
        /*[in,out]*/ VARIANT * stateOfAggregation,
        /*[in,out]*/ VARIANT * keyCompoundId ) = 0;
};

struct __declspec(uuid("678c0a9f-7d66-11d2-a67d-00105a42887f"))
ICapeThermoPropertyRoutine : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CalcAndGetLnPhi (
        /*[in]*/ BSTR phaseLabel,
        /*[in]*/ double temperature,
        /*[in]*/ double pressure,
        /*[in]*/ VARIANT moleNumbers,
        /*[in]*/ int fFlags,
        /*[in,out]*/ VARIANT * lnPhi,
        /*[in,out]*/ VARIANT * lnPhiDT,
        /*[in,out]*/ VARIANT * lnPhiDP,
        /*[in,out]*/ VARIANT * lnPhiDn ) = 0;
      virtual HRESULT __stdcall CalcSinglePhaseProp (
        /*[in]*/ VARIANT props,
        /*[in]*/ BSTR phaseLabel ) = 0;
      virtual HRESULT __stdcall CalcTwoPhaseProp (
        /*[in]*/ VARIANT props,
        /*[in]*/ VARIANT phaseLabels ) = 0;
      virtual HRESULT __stdcall CheckSinglePhasePropSpec (
        /*[in]*/ BSTR property,
        /*[in]*/ BSTR phaseLabel,
        /*[out,retval]*/ VARIANT_BOOL * valid ) = 0;
      virtual HRESULT __stdcall CheckTwoPhasePropSpec (
        /*[in]*/ BSTR property,
        /*[in]*/ VARIANT phaseLabels,
        /*[out,retval]*/ VARIANT_BOOL * valid ) = 0;
      virtual HRESULT __stdcall GetSinglePhasePropList (
        /*[out,retval]*/ VARIANT * props ) = 0;
      virtual HRESULT __stdcall GetTwoPhasePropList (
        /*[out,retval]*/ VARIANT * props ) = 0;
};

struct __declspec(uuid("678c0aa0-7d66-11d2-a67d-00105a42887f"))
ICapeThermoEquilibriumRoutine : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CalcEquilibrium (
        /*[in]*/ VARIANT specification1,
        /*[in]*/ VARIANT specification2,
        /*[in]*/ BSTR solutionType ) = 0;
      virtual HRESULT __stdcall CheckEquilibriumSpec (
        /*[in]*/ VARIANT specification1,
        /*[in]*/ VARIANT specification2,
        /*[in]*/ BSTR solutionType,
        /*[out,retval]*/ VARIANT_BOOL * isSupported ) = 0;
};

struct __declspec(uuid("678c0aa1-7d66-11d2-a67d-00105a42887f"))
ICapeThermoUniversalConstant : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetUniversalConstant (
        /*[in]*/ BSTR constantId,
        /*[out,retval]*/ VARIANT * constantValue ) = 0;
      virtual HRESULT __stdcall GetUniversalConstantList (
        /*[out,retval]*/ VARIANT * constantId ) = 0;
};

struct __declspec(uuid("678c0aa2-7d66-11d2-a67d-00105a42887f"))
ICapeThermoPropertyPackageManager : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetPropertyPackageList (
        /*[out,retval]*/ VARIANT * PackageNames ) = 0;
      virtual HRESULT __stdcall GetPropertyPackage (
        /*[in]*/ BSTR PackageName,
        /*[out,retval]*/ IDispatch * * Package ) = 0;
};

enum eCapeCalculationCode : int
{
    CAPE_NO_CALCULATION = 0,
    CAPE_LOG_FUGACITY_COEFFICIENTS = 1,
    CAPE_T_DERIVATIVE = 2,
    CAPE_P_DERIVATIVE = 4,
    CAPE_MOLE_NUMBERS_DERIVATIVES = 8
};

enum eCapePhaseStatus : int
{
    CAPE_UNKNOWNPHASESTATUS = 0,
    CAPE_ATEQUILIBRIUM = 1,
    CAPE_ESTIMATES = 2
};

struct __declspec(uuid("678c0998-0100-11d2-a67d-00105a42887f"))
ICapeUnit : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ports (
        /*[out,retval]*/ IDispatch * * ports ) = 0;
      virtual HRESULT __stdcall get_ValStatus (
        /*[out,retval]*/ CapeValidationStatus * ValStatus ) = 0;
      virtual HRESULT __stdcall Calculate ( ) = 0;
      virtual HRESULT __stdcall Validate (
        /*[in,out]*/ BSTR * message,
        /*[out,retval]*/ VARIANT_BOOL * isValid ) = 0;
};

enum eCapePortType : int
{
    CAPE_MATERIAL = 0,
    CAPE_ENERGY = 1,
    CAPE_INFORMATION = 2,
    CAPE_ANY = 3
};

struct __declspec(uuid("678c0999-0093-11d2-a67d-00105a42887f"))
ICapeUnitPort : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_portType (
        /*[out,retval]*/ CapePortType * portType ) = 0;
      virtual HRESULT __stdcall get_direction (
        /*[out,retval]*/ CapePortDirection * portDirection ) = 0;
      virtual HRESULT __stdcall get_connectedObject (
        /*[out,retval]*/ IDispatch * * connectedObject ) = 0;
      virtual HRESULT __stdcall Connect (
        /*[in]*/ IDispatch * objectToConnect ) = 0;
      virtual HRESULT __stdcall Disconnect ( ) = 0;
};

enum eCapePortDirection : int
{
    CAPE_INLET = 0,
    CAPE_OUTLET = 1,
    CAPE_INLET_OUTLET = 2
};

struct __declspec(uuid("678c099b-0093-11d2-a67d-00105a42887f"))
ICapeUnitReport : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_reports (
        /*[out,retval]*/ VARIANT * reports ) = 0;
      virtual HRESULT __stdcall get_selectedReport (
        /*[out,retval]*/ BSTR * report ) = 0;
      virtual HRESULT __stdcall put_selectedReport (
        /*[in]*/ BSTR report ) = 0;
      virtual HRESULT __stdcall ProduceReport (
        /*[in,out]*/ BSTR * message ) = 0;
};

struct __declspec(uuid("678c09b1-7d66-11d2-a67d-00105a42887f"))
ICapeUnitPortVariables : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Variable (
        /*[in]*/ BSTR Variable_type,
        /*[in]*/ BSTR Component,
        /*[out,retval]*/ int * index ) = 0;
      virtual HRESULT __stdcall SetIndex (
        /*[in]*/ BSTR Variable_type,
        /*[in]*/ BSTR Component,
        /*[in]*/ int index ) = 0;
};

struct __declspec(uuid("678c0afe-0100-11d2-a67d-00105a42887f"))
ICapeKineticReactionContext : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall SetReactionObject (
        /*[in]*/ IDispatch * * reactionsObject ) = 0;
};

struct __declspec(uuid("678c0afd-0100-11d2-a67d-00105a42887f"))
ICapeElectrolyteReactionContext : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall SetReactionObject (
        /*[in]*/ IDispatch * * reactionsObject ) = 0;
};

struct __declspec(uuid("678c0afc-0100-11d2-a67d-00105a42887f"))
ICapeReactionsPackageManager : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetListOfReactionsPackages (
        /*[out,retval]*/ VARIANT * reactionIDS ) = 0;
      virtual HRESULT __stdcall ResolveReactionsPackage (
        /*[in]*/ BSTR reactionsPkg,
        /*[out,retval]*/ IDispatch * * reaction ) = 0;
};

enum eCapeReactionType : int
{
    CAPE_EQUILIBRIUM = 0,
    CAPE_KINETIC = 1
};

struct __declspec(uuid("678c0afb-0100-11d2-a67d-00105a42887f"))
ICapeReactionChemistry : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetNumberOfReactions (
        /*[out,retval]*/ long * nReacs ) = 0;
      virtual HRESULT __stdcall GetReactionsIds (
        /*[out,retval]*/ VARIANT * reactionIDS ) = 0;
      virtual HRESULT __stdcall GetReactionType (
        /*[in]*/ BSTR reacID,
        /*[out,retval]*/ CapeReactionType * nReacs ) = 0;
      virtual HRESULT __stdcall GetNumberOfReactionCompounds (
        /*[in]*/ BSTR reacID,
        /*[out,retval]*/ long * nComps ) = 0;
      virtual HRESULT __stdcall GetReactionCompoundIds (
        /*[in]*/ BSTR reacID,
        /*[in,out]*/ VARIANT * compIds,
        /*[in,out]*/ VARIANT * compCharge,
        /*[in,out]*/ VARIANT * compCASNumber ) = 0;
      virtual HRESULT __stdcall GetStoichiometricCoefficients (
        /*[in]*/ BSTR reacID,
        /*[out,retval]*/ VARIANT * coeffs ) = 0;
      virtual HRESULT __stdcall GetReactionPhase (
        /*[in]*/ BSTR reacID,
        /*[out,retval]*/ BSTR * phase ) = 0;
      virtual HRESULT __stdcall GetReactionRateBasis (
        /*[in]*/ BSTR reacID,
        /*[out,retval]*/ CapeReactionRateBasis * rateBasis ) = 0;
      virtual HRESULT __stdcall GetReactionConcBasis (
        /*[in]*/ BSTR reacID,
        /*[out,retval]*/ BSTR * concBasis ) = 0;
      virtual HRESULT __stdcall GetBaseReactant (
        /*[in]*/ BSTR reacID,
        /*[out,retval]*/ BSTR * baseReactantId ) = 0;
      virtual HRESULT __stdcall GetPhaseCompounds (
        /*[in]*/ BSTR reacID,
        /*[in,out]*/ long * compNo,
        /*[in,out]*/ VARIANT * compIds ) = 0;
      virtual HRESULT __stdcall GetReactionParameters (
        /*[in]*/ BSTR reacID,
        /*[out,retval]*/ IDispatch * * ParameterCollection ) = 0;
};

enum eCapeReactionRateBasis : int
{
    CAPE_HOMOGENEOUS = 0,
    CAPE_HETEROGENEOUS = 1
};

struct __declspec(uuid("678c0afa-0100-11d2-a67d-00105a42887f"))
ICapeReactionProperties : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetReactionProp (
        /*[in]*/ BSTR property,
        /*[in]*/ BSTR phase,
        /*[in]*/ VARIANT reacIds,
        /*[in]*/ BSTR basis,
        /*[out,retval]*/ VARIANT * propVals ) = 0;
      virtual HRESULT __stdcall SetReactionProp (
        /*[in]*/ BSTR property,
        /*[in]*/ BSTR phase,
        /*[in]*/ VARIANT reacIds,
        /*[in]*/ BSTR basis,
        /*[in]*/ VARIANT propVals ) = 0;
};

struct __declspec(uuid("678c0af9-0100-11d2-a67d-00105a42887f"))
ICapeReactionsRoutine : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CalcReactionProp (
        /*[in]*/ VARIANT props,
        /*[in]*/ BSTR phase,
        /*[in]*/ VARIANT reacIds,
        /*[in]*/ BSTR basis ) = 0;
};

struct __declspec(uuid("678c0aa1-0100-11d2-a67d-00105a42887f"))
ICapeUnitTypeInfo : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GetUnitType (
        /*[out,retval]*/ CapeUnitType * unitType ) = 0;
};

enum eCapeUnitType : int
{
    CAPE_REFINERYREACTOROP = 0,
    CAPE_REFINERYBLENDEROP = 1,
    CAPE_REFINERYGENERALOP = 2,
    CAPE_CONVENTIONALOP = 3
};

struct __declspec(uuid("678c0aa0-0100-11d2-a67d-00105a42887f"))
ICapeThermoPetroFractions : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall SetPetroProp (
        /*[in]*/ BSTR propertyID,
        /*[in]*/ VARIANT compID,
        /*[in]*/ BSTR basis,
        /*[in]*/ VARIANT values ) = 0;
      virtual HRESULT __stdcall GetPetroProp (
        /*[in]*/ BSTR propertyID,
        /*[in]*/ VARIANT compID,
        /*[in]*/ BSTR basis,
        /*[out,retval]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall Characterize ( ) = 0;
      virtual HRESULT __stdcall RemovePetroProp (
        /*[in]*/ BSTR propertyID,
        /*[in]*/ VARIANT compID ) = 0;
      virtual HRESULT __stdcall DefineFromPetroFractions (
        /*[in]*/ IDispatch * originFractionsSet ) = 0;
};

enum eCapeMatrixOrdering : int
{
    CAPE_ROW = 0,
    CAPE_COLUMN = 1,
    CAPE_OTHER = 2
};

enum eCapeMatrixType : int
{
    CAPE_FULL = 0,
    CAPE_UNSTRUCTURED = 1,
    CAPE_BANDED = 2
};

struct __declspec(uuid("3ad3c8f6-e6ec-4e63-b51e-0e9403535463"))
ICapeNumericMatrix : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetNumRows (
        /*[out,retval]*/ long * numrows ) = 0;
      virtual HRESULT __stdcall GetNumCols (
        /*[out,retval]*/ long * numcols ) = 0;
      virtual HRESULT __stdcall QuerySymmetric (
        /*[out,retval]*/ VARIANT_BOOL * IsSymm ) = 0;
      virtual HRESULT __stdcall QueryOrdering (
        /*[out,retval]*/ enum eCapeMatrixOrdering * order ) = 0;
      virtual HRESULT __stdcall QueryType (
        /*[out,retval]*/ enum eCapeMatrixType * Type ) = 0;
      virtual HRESULT __stdcall GetValues (
        /*[out,retval]*/ VARIANT * values ) = 0;
};

struct __declspec(uuid("678c09af-7d66-11d2-a67d-00105a42887f"))
ICapeNumericUnstructuredMatrix : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetStructure (
        /*[in,out]*/ VARIANT * rowIndices,
        /*[in,out]*/ VARIANT * colIndices ) = 0;
};

struct __declspec(uuid("9304e044-3311-41ed-8766-0123cb44038a"))
ICapeNumericESO : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetNumVars (
        /*[out,retval]*/ long * numvars ) = 0;
      virtual HRESULT __stdcall GetNumEqns (
        /*[out,retval]*/ long * numeqns ) = 0;
      virtual HRESULT __stdcall SetFixedVariables (
        /*[in]*/ VARIANT * varIndices,
        /*[in]*/ VARIANT * varValues ) = 0;
      virtual HRESULT __stdcall SetAllVariables (
        /*[in]*/ VARIANT * varValues ) = 0;
      virtual HRESULT __stdcall SetVariables (
        /*[in]*/ VARIANT * varIndices,
        /*[in]*/ VARIANT * varValues ) = 0;
      virtual HRESULT __stdcall GetAllVariables (
        /*[out,retval]*/ VARIANT * varValues ) = 0;
      virtual HRESULT __stdcall GetVariables (
        /*[in]*/ VARIANT * varIndices,
        /*[out,retval]*/ VARIANT * varValues ) = 0;
      virtual HRESULT __stdcall GetAllResiduals (
        /*[out,retval]*/ VARIANT * residuals ) = 0;
      virtual HRESULT __stdcall GetResiduals (
        /*[in]*/ VARIANT * eqnIndices,
        /*[out,retval]*/ VARIANT * residuals ) = 0;
      virtual HRESULT __stdcall GetJacobianStruct (
        /*[out,retval]*/ struct ICapeNumericMatrix * * matrix ) = 0;
      virtual HRESULT __stdcall GetAllJacobianValues (
        /*[out,retval]*/ struct ICapeNumericMatrix * * matrix ) = 0;
      virtual HRESULT __stdcall GetJacobianValues (
        /*[in]*/ VARIANT * indices,
        /*[out,retval]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall SetVariablesIndex (
        /*[in]*/ VARIANT * varIndexes ) = 0;
      virtual HRESULT __stdcall GetLowerBounds (
        /*[out,retval]*/ VARIANT * lbounds ) = 0;
      virtual HRESULT __stdcall GetUpperBounds (
        /*[out,retval]*/ VARIANT * ubounds ) = 0;
};

struct __declspec(uuid("678c0b71-0100-11d2-a67d-00105a42887f"))
ICapeNumericFullMatrix : IDispatch
{};

struct __declspec(uuid("678c0b72-0100-11d2-a67d-00105a42887f"))
ICapeNumericBandedMatrix : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BandWidth (
        /*[out,retval]*/ long * pCapeLong ) = 0;
};

struct __declspec(uuid("678c0b74-0100-11d2-a67d-00105a42887f"))
ICapeNumericLAESO : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LHS (
        /*[in]*/ IDispatch * LHS ) = 0;
      virtual HRESULT __stdcall get_LHS (
        /*[out,retval]*/ IDispatch * * LHS ) = 0;
      virtual HRESULT __stdcall put_RHS (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_RHS (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("678c0b75-0100-11d2-a67d-00105a42887f"))
ICapeNumericNLAESO : IDispatch
{};

struct __declspec(uuid("678c0b76-0100-11d2-a67d-00105a42887f"))
ICapeNumericDAESO : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_SetAllDerivatives (
        /*[in]*/ VARIANT _arg1 ) = 0;
      virtual HRESULT __stdcall get_GetAllDerivatives (
        /*[out,retval]*/ VARIANT * varValues ) = 0;
      virtual HRESULT __stdcall get_GetDerivatives (
        /*[in]*/ VARIANT varIndices,
        /*[out,retval]*/ VARIANT * varValues ) = 0;
      virtual HRESULT __stdcall get_GetDiffJacobianStruct (
        /*[out,retval]*/ IDispatch * * jacStruct ) = 0;
      virtual HRESULT __stdcall get_GetAllDiffJacobianValues (
        /*[out,retval]*/ IDispatch * * matrix ) = 0;
      virtual HRESULT __stdcall get_GetDiffJacobianValues (
        /*[in]*/ VARIANT indices,
        /*[out,retval]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall put_SetIndependantVar (
        /*[in]*/ double _arg1 ) = 0;
      virtual HRESULT __stdcall get_GetIndependantVar (
        /*[out,retval]*/ double * indVar ) = 0;
};

struct __declspec(uuid("678c0b77-0100-11d2-a67d-00105a42887f"))
ICapeNumericGlobalESO : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ListOfESOs (
        /*[in]*/ IDispatch * ListOfESOs ) = 0;
      virtual HRESULT __stdcall get_ListOfESOs (
        /*[out,retval]*/ IDispatch * * ListOfESOs ) = 0;
};

struct __declspec(uuid("678c0b78-0100-11d2-a67d-00105a42887f"))
ICapeNumericGlobalLAESO : IDispatch
{};

struct __declspec(uuid("678c0b79-0100-11d2-a67d-00105a42887f"))
ICapeNumericGlobalNLAESO : IDispatch
{};

struct __declspec(uuid("678c0b7a-0100-11d2-a67d-00105a42887f"))
ICapeNumericGlobalDAESO : IDispatch
{};

enum eCapeEventType : int
{
    CAPE_BASIC = 0,
    CAPE_COMPOSITE = 1,
    CAPE_BINARY = 2,
    CAPE_UNARY = 3
};

struct __declspec(uuid("678c0b81-0100-11d2-a67d-00105a42887f"))
ICapeNumericEvent : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall Eval (
        /*[out,retval]*/ VARIANT_BOOL * pCapeBoolean ) = 0;
      virtual HRESULT __stdcall QueryType (
        /*[out,retval]*/ enum eCapeEventType * pCapeEventType ) = 0;
};

struct __declspec(uuid("678c0b87-0100-11d2-a67d-00105a42887f"))
ICapeNumericExternalEventInfo : IDispatch
{};

struct __declspec(uuid("678c0b7c-0100-11d2-a67d-00105a42887f"))
ICapeNumericModel : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall SetVariablesIndex (
        /*[in]*/ VARIANT varIndexes,
        /*[out,retval]*/ long * pCapeLong ) = 0;
      virtual HRESULT __stdcall put_ActiveESO (
        /*[in]*/ IDispatch * pICapeNumericESO ) = 0;
      virtual HRESULT __stdcall get_ActiveESO (
        /*[out,retval]*/ IDispatch * * pICapeNumericESO ) = 0;
      virtual HRESULT __stdcall put_CommonESO (
        /*[in]*/ IDispatch * pICapeNumericESO ) = 0;
      virtual HRESULT __stdcall get_CommonESO (
        /*[out,retval]*/ IDispatch * * pICapeNumericESO ) = 0;
      virtual HRESULT __stdcall AddExternalEvent (
        /*[in]*/ struct ICapeNumericEvent * anEvent,
        /*[out,retval]*/ struct ICapeNumericExternalEventInfo * * pICapeNumericExternalEventInfo ) = 0;
};

struct __declspec(uuid("678c0b7d-0100-11d2-a67d-00105a42887f"))
ICapeNumericContinuousModel : IDispatch
{};

struct __declspec(uuid("678c0b7e-0100-11d2-a67d-00105a42887f"))
ICapeNumericHierarchicalModel : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_STNList (
        /*[out,retval]*/ IDispatch * * pCapeArrayNumericSTN ) = 0;
};

struct __declspec(uuid("678c0b7f-0100-11d2-a67d-00105a42887f"))
ICapeNumericAggregateModel : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModelList (
        /*[out,retval]*/ IDispatch * * pCapeArrayNumericModel ) = 0;
      virtual HRESULT __stdcall SetConnectionEquation (
        /*[in]*/ struct ICapeNumericModel * inputModel,
        /*[in]*/ long inputIndex,
        /*[in]*/ struct ICapeNumericModel * outputModel,
        /*[in]*/ long outputIndex ) = 0;
};

enum eCapeEventInfoKind : int
{
    CAPE_EXTERNAL = 0,
    CAPE_INTERNAL = 1
};

struct __declspec(uuid("678c0b86-0100-11d2-a67d-00105a42887f"))
ICapeNumericEventInfo : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall QueryKind (
        /*[out,retval]*/ enum eCapeEventInfoKind * pCapeEventInfoKind ) = 0;
      virtual HRESULT __stdcall get_SubEvent (
        /*[out,retval]*/ struct ICapeNumericEvent * * pICapeNumericEvent ) = 0;
      virtual HRESULT __stdcall get_Event (
        /*[out,retval]*/ struct ICapeNumericEvent * * pICapeNumericEvent ) = 0;
};

struct __declspec(uuid("678c0b80-0100-11d2-a67d-00105a42887f"))
ICapeNumericSTN : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_CurrentState (
        /*[in]*/ BSTR pCapeString ) = 0;
      virtual HRESULT __stdcall get_CurrentState (
        /*[out,retval]*/ BSTR * pCapeString ) = 0;
      virtual HRESULT __stdcall get_ParentModel (
        /*[out,retval]*/ struct ICapeNumericModel * * pICapeNumericModel ) = 0;
      virtual HRESULT __stdcall get_PossibleTransitions (
        /*[out,retval]*/ IDispatch * * pCapeArrayNumericInternalEventInfo ) = 0;
      virtual HRESULT __stdcall get_StateTransitions (
        /*[in]*/ BSTR fromState,
        /*[in,out]*/ IDispatch * * eventList,
        /*[in,out]*/ VARIANT * stateList,
        /*[out,retval]*/ double * pCapeDouble ) = 0;
      virtual HRESULT __stdcall get_stateList (
        /*[out,retval]*/ VARIANT * pCapeArrayString ) = 0;
      virtual HRESULT __stdcall get_StateModel (
        /*[in]*/ BSTR stateName,
        /*[out,retval]*/ struct ICapeNumericModel * * pICapeNumericModel ) = 0;
      virtual HRESULT __stdcall MoveToNextState (
        /*[in]*/ struct ICapeNumericEventInfo * firedEvent,
        /*[out,retval]*/ BSTR * pCapeString ) = 0;
};

enum eCapeLogicalRelation : int
{
    CAPE_GEQ = 0,
    CAPE_LEQ = 1,
    CAPE_GT = 2,
    CAPE_LT = 3
};

struct __declspec(uuid("678c0b82-0100-11d2-a67d-00105a42887f"))
ICapeNumericBasicEvent : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Variable (
        /*[out,retval]*/ long * pCapeLong ) = 0;
      virtual HRESULT __stdcall get_LogicalRelation (
        /*[out,retval]*/ enum eCapeLogicalRelation * pCapeLogicalRelation ) = 0;
      virtual HRESULT __stdcall get_value (
        /*[out,retval]*/ double * pCapeDouble ) = 0;
};

enum eCapeLogicalOperator : int
{
    CAPE_AND = 0,
    CAPE_OR = 1,
    CAPE_NOT = 2
};

struct __declspec(uuid("678c0b83-0100-11d2-a67d-00105a42887f"))
ICapeNumericCompositeEvent : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RightOperand (
        /*[out,retval]*/ struct ICapeNumericEvent * * pICapeNumericEvent ) = 0;
      virtual HRESULT __stdcall get_LogicalOperator (
        /*[out,retval]*/ enum eCapeLogicalOperator * pCapeLogicalOperator ) = 0;
};

struct __declspec(uuid("678c0b84-0100-11d2-a67d-00105a42887f"))
ICapeNumericBinaryEvent : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LeftOperand (
        /*[out,retval]*/ struct ICapeNumericEvent * * pICapeNumericEvent ) = 0;
};

struct __declspec(uuid("678c0b85-0100-11d2-a67d-00105a42887f"))
ICapeNumericUnaryEvent : IDispatch
{};

struct __declspec(uuid("678c0b88-0100-11d2-a67d-00105a42887f"))
ICapeNumericInternalEventInfo : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_STN (
        /*[out,retval]*/ struct ICapeNumericSTN * * pICapeNumericSTN ) = 0;
      virtual HRESULT __stdcall get_ToState (
        /*[out,retval]*/ BSTR * pCapeString ) = 0;
};

struct __declspec(uuid("678c0b8a-0100-11d2-a67d-00105a42887f"))
ICapeNumericSolver : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall Solve (
        /*[out,retval]*/ long * pCapeLong ) = 0;
      virtual HRESULT __stdcall get_Solution (
        /*[out,retval]*/ VARIANT * pCapeArrayDouble ) = 0;
};

struct __declspec(uuid("678c0b8b-0100-11d2-a67d-00105a42887f"))
ICapeNumericLASolver : IDispatch
{};

struct __declspec(uuid("678c0b8c-0100-11d2-a67d-00105a42887f"))
ICapeNumericNLASolver : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_CvgTolerance (
        /*[in]*/ double pCapeDouble ) = 0;
      virtual HRESULT __stdcall get_CvgTolerance (
        /*[out,retval]*/ double * pCapeDouble ) = 0;
      virtual HRESULT __stdcall put_MaxIterations (
        /*[in]*/ long pCapeLong ) = 0;
      virtual HRESULT __stdcall get_MaxIterations (
        /*[out,retval]*/ long * pCapeLong ) = 0;
      virtual HRESULT __stdcall DoNIteration (
        /*[in]*/ long nbIterations,
        /*[out,retval]*/ long * pCapeLong ) = 0;
};

struct __declspec(uuid("678c0b8d-0100-11d2-a67d-00105a42887f"))
ICapeNumericDAESolver : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_RelTolerance (
        /*[in]*/ VARIANT pCapeArrayDouble ) = 0;
      virtual HRESULT __stdcall get_RelTolerance (
        /*[out,retval]*/ VARIANT * pCapeArrayDouble ) = 0;
      virtual HRESULT __stdcall put_AbsTolerance (
        /*[in]*/ VARIANT pCapeArrayDouble ) = 0;
      virtual HRESULT __stdcall get_AbsTolerance (
        /*[out,retval]*/ VARIANT * pCapeArrayDouble ) = 0;
      virtual HRESULT __stdcall AdvanceToNextEvent (
        /*[in]*/ IDispatch * endConditions,
        /*[in,out]*/ double * timeBefore,
        /*[in,out]*/ double * timeAfter,
        /*[out,retval]*/ IDispatch * * pCapeArrayNumericEventInfo ) = 0;
};

struct __declspec(uuid("678c0b65-0100-11d2-a67d-00105a42887f"))
ICapeSMSTFlowsheetManager : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CreateFlowsheet (
        /*[in]*/ CapeFlowsheetType Type,
        /*[out,retval]*/ IDispatch * * Flowsheet ) = 0;
};

enum eCapeFlowsheetType : int
{
    CAPE_PROCESS_GRAPH = 0,
    CAPE_PARTITION_GRAPH = 1,
    CAPE_OPEN_PARTITION_GRAPH = 2
};

struct __declspec(uuid("678c0b66-0100-11d2-a67d-00105a42887f"))
ICapeSMSTFlowsheet : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StreamCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_UnitCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_MaximumUnitCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_MaximumStreamCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_parameters (
        /*[out,retval]*/ IDispatch * * parameters ) = 0;
};

struct __declspec(uuid("678c0b67-0100-11d2-a67d-00105a42887f"))
ICapeSMSTProcessGraph : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall AddStream (
        /*[in]*/ long streamId,
        /*[in]*/ long iunitId,
        /*[in]*/ long funitId ) = 0;
      virtual HRESULT __stdcall AddStreamWeight (
        /*[in]*/ long streamId,
        /*[in]*/ double weight ) = 0;
      virtual HRESULT __stdcall AddStreamType (
        /*[in]*/ long streamId,
        /*[in]*/ CapeSMSTStream streamtype ) = 0;
      virtual HRESULT __stdcall AddTornProperty (
        /*[in]*/ long streamId,
        /*[in]*/ VARIANT_BOOL toBeTorn ) = 0;
      virtual HRESULT __stdcall AddNotTornProperty (
        /*[in]*/ long streamId,
        /*[in]*/ VARIANT_BOOL notToBeTorn ) = 0;
      virtual HRESULT __stdcall RemoveStream (
        /*[in]*/ long streamId ) = 0;
      virtual HRESULT __stdcall get_SetOfStream (
        /*[out,retval]*/ VARIANT * streams ) = 0;
      virtual HRESULT __stdcall get_SetOfUnit (
        /*[out,retval]*/ VARIANT * UnitSet ) = 0;
      virtual HRESULT __stdcall StreamConnection (
        /*[in]*/ long streamId,
        /*[in,out]*/ long * iunitId,
        /*[in,out]*/ long * funitId ) = 0;
      virtual HRESULT __stdcall get_StreamWeight (
        /*[in]*/ long streamId,
        /*[out,retval]*/ double * weight ) = 0;
      virtual HRESULT __stdcall get_streamtype (
        /*[in]*/ long streamId,
        /*[out,retval]*/ CapeSMSTStream * streamtype ) = 0;
      virtual HRESULT __stdcall get_TornProperty (
        /*[in]*/ long streamId,
        /*[out,retval]*/ VARIANT_BOOL * Torn ) = 0;
      virtual HRESULT __stdcall get_NotTornProperty (
        /*[in]*/ long streamId,
        /*[out,retval]*/ VARIANT_BOOL * NotTorn ) = 0;
};

enum eCapeSMSTStream : int
{
    CAPE_FEED = 0,
    CAPE_PRODUCT = 1,
    CAPE_PROCESS = 2
};

struct __declspec(uuid("678c0b68-0100-11d2-a67d-00105a42887f"))
ICapeSMSTPartitionGraph : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_InitialProcessGraph (
        /*[in]*/ IDispatch * ProcessGraph ) = 0;
      virtual HRESULT __stdcall get_InitialProcessGraph (
        /*[out,retval]*/ IDispatch * * ProcessGraph ) = 0;
};

struct __declspec(uuid("678c0b69-0100-11d2-a67d-00105a42887f"))
ICapeSMSTOpenPartitionGraph : IDispatch
{};

struct __declspec(uuid("678c0b6a-0100-11d2-a67d-00105a42887f"))
ICapeSMSTAnalysisManager : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CreateAnalysis (
        /*[in]*/ CapeAnalysisType Type,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ IDispatch * * Analysis ) = 0;
      virtual HRESULT __stdcall SMAnalysisImplementation (
        /*[out,retval]*/ VARIANT_BOOL * implementation ) = 0;
      virtual HRESULT __stdcall PartitioningImplementation (
        /*[out,retval]*/ VARIANT_BOOL * implementation ) = 0;
      virtual HRESULT __stdcall TearingImplementation (
        /*[out,retval]*/ VARIANT_BOOL * implementation ) = 0;
      virtual HRESULT __stdcall SequencingImplementation (
        /*[out,retval]*/ VARIANT_BOOL * implementation ) = 0;
};

enum eCapeAnalysisType : int
{
    CAPE_SM_ANALYSIS = 0,
    CAPE_PARTITIONING = 1,
    CAPE_TEARING = 2,
    CAPE_SEQUENCING = 3
};

enum eCapeConvergenceCode : int
{
    CAPE_CONVERGENCE_YES = 0,
    CAPE_CONVERGENCE_NO = 1,
    CAPE_CONVERGENCE_MAYBE = 2
};

struct __declspec(uuid("678c0b6b-0100-11d2-a67d-00105a42887f"))
ICapeSMSTAnalysis : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MaximumUnitCount (
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall get_MaximumStreamCount (
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall Perform (
        /*[in]*/ IDispatch * Flowsheet,
        /*[out,retval]*/ CapeConvergenceCode * result ) = 0;
      virtual HRESULT __stdcall CheckFlowsheetConsistency (
        /*[in]*/ IDispatch * Flowsheet,
        /*[out,retval]*/ CapeConsistencyCode * result ) = 0;
      virtual HRESULT __stdcall get_parameters (
        /*[out,retval]*/ IDispatch * * parameters ) = 0;
};

enum eCapeConsistencyCode : int
{
    CAPE_CONSISTENCY_YES = 0,
    CAPE_CONSISTENCY_NO = 1,
    CAPE_CONSISTENCY_MAYBE = 2
};

struct __declspec(uuid("678c0b6c-0100-11d2-a67d-00105a42887f"))
ICapeSMSTSequencing : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetUnits (
        /*[out,retval]*/ VARIANT * results ) = 0;
};

struct __declspec(uuid("678c0b6d-0100-11d2-a67d-00105a42887f"))
ICapeSMSTTearing : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetTornStreams (
        /*[out,retval]*/ VARIANT * result ) = 0;
      virtual HRESULT __stdcall CreateAndCompleteOpenPartitionGraph (
        /*[in]*/ BSTR name,
        /*[in]*/ IDispatch * manager,
        /*[out,retval]*/ IDispatch * * result ) = 0;
};

struct __declspec(uuid("678c0b6e-0100-11d2-a67d-00105a42887f"))
ICapeSMSTPartitioning : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetPartitionCount (
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall GetUnitsInPartition (
        /*[in]*/ long partitionNb,
        /*[out,retval]*/ VARIANT * result ) = 0;
      virtual HRESULT __stdcall CreateAndCompletePartitionGraph (
        /*[in]*/ long partitionNb,
        /*[in]*/ BSTR name,
        /*[in]*/ IDispatch * manager,
        /*[out,retval]*/ IDispatch * * result ) = 0;
      virtual HRESULT __stdcall put_ExternalSystemId (
        /*[in]*/ long id ) = 0;
      virtual HRESULT __stdcall get_ExternalSystemId (
        /*[out,retval]*/ long * id ) = 0;
};

struct __declspec(uuid("678c0b70-0100-11d2-a67d-00105a42887f"))
ICapeSMSTSMAnalysis : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetPartitionCount (
        /*[out,retval]*/ long * result ) = 0;
      virtual HRESULT __stdcall GetUnitsInPartition (
        /*[in]*/ long partitionNb,
        /*[out,retval]*/ VARIANT * result ) = 0;
      virtual HRESULT __stdcall GetTornStreamsInPartition (
        /*[in]*/ long partitionNb,
        /*[out,retval]*/ VARIANT * result ) = 0;
};

struct __declspec(uuid("678c09cc-7d66-11d2-a67d-00105a42887f"))
ICapeMINLP : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetMINLPSize (
        /*[in,out]*/ long * nv,
        /*[in,out]*/ long * niv,
        /*[in,out]*/ long * nlv,
        /*[in,out]*/ long * nliv,
        /*[in,out]*/ long * nc,
        /*[in,out]*/ long * nlc,
        /*[in,out]*/ long * nlz,
        /*[in,out]*/ long * nnz,
        /*[in,out]*/ long * nlzof,
        /*[in,out]*/ long * nnzof ) = 0;
      virtual HRESULT __stdcall GetMINLPStructure (
        /*[in]*/ BSTR structuretype,
        /*[in,out]*/ VARIANT * rowindex,
        /*[in,out]*/ VARIANT * columnindex,
        /*[in,out]*/ VARIANT * objindex ) = 0;
      virtual HRESULT __stdcall GetMINLPVariableNames (
        /*[in]*/ VARIANT vids,
        /*[in,out]*/ VARIANT * vnames ) = 0;
      virtual HRESULT __stdcall GetMINLPVariableTypes (
        /*[in]*/ VARIANT vids,
        /*[in,out]*/ VARIANT * isinteger ) = 0;
      virtual HRESULT __stdcall GetMINLPVariableBooleanAttribute (
        /*[in]*/ VARIANT vids,
        /*[in]*/ VARIANT attribute,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall GetMINLPVariableIntegerAttribute (
        /*[in]*/ VARIANT vids,
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall GetMINLPVariableDoubleAttribute (
        /*[in]*/ VARIANT vids,
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall GetMINLPVariableStringAttribute (
        /*[in]*/ VARIANT vids,
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall GetMINLPVariableBounds (
        /*[in]*/ VARIANT vids,
        /*[in,out]*/ VARIANT * LB,
        /*[in,out]*/ VARIANT * UB ) = 0;
      virtual HRESULT __stdcall GetMINLPVariableValues (
        /*[in]*/ VARIANT vids,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall SetMINLPVariableValues (
        /*[in]*/ VARIANT vids,
        /*[in]*/ VARIANT values ) = 0;
      virtual HRESULT __stdcall GetMINLPConstraintNames (
        /*[in]*/ VARIANT cids,
        /*[in,out]*/ VARIANT * cnames ) = 0;
      virtual HRESULT __stdcall GetMINLPConstraintBounds (
        /*[in]*/ VARIANT cids,
        /*[in,out]*/ VARIANT * LB,
        /*[in,out]*/ VARIANT * UB ) = 0;
      virtual HRESULT __stdcall GetMINLPConstraintLinearity (
        /*[in]*/ VARIANT cids,
        /*[in,out]*/ VARIANT * islinear ) = 0;
      virtual HRESULT __stdcall GetMINLPConstraintBooleanAttribute (
        /*[in]*/ VARIANT cids,
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall GetMINLPConstraintIntegerAttribute (
        /*[in]*/ VARIANT cids,
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall GetMINLPConstraintDoubleAttribute (
        /*[in]*/ VARIANT cids,
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall GetMINLPConstraintStringAttribute (
        /*[in]*/ VARIANT cids,
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall GetMINLPNonlinearConstraintValues (
        /*[in]*/ VARIANT cids,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall GetMINLPConstraintDerivativeValues (
        /*[in]*/ BSTR structtype,
        /*[in]*/ VARIANT cids,
        /*[in,out]*/ VARIANT * vals ) = 0;
      virtual HRESULT __stdcall GetMINLPObjectiveFunctionType (
        /*[in,out]*/ long * otype ) = 0;
      virtual HRESULT __stdcall GetMINLPNonlinearObjectiveFunctionValue (
        /*[in,out]*/ double * value ) = 0;
      virtual HRESULT __stdcall GetMINLPObjectiveFunctionDerivativeValues (
        /*[in]*/ BSTR stype,
        /*[in,out]*/ VARIANT * v ) = 0;
      virtual HRESULT __stdcall GetMINLPObjectiveFunctionBooleanAttribute (
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ VARIANT_BOOL * value ) = 0;
      virtual HRESULT __stdcall GetMINLPObjectiveFunctionIntegerAttribute (
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ long * value ) = 0;
      virtual HRESULT __stdcall GetMINLPObjectiveFunctionDoubleAttribute (
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ double * value ) = 0;
      virtual HRESULT __stdcall GetMINLPObjectiveFunctionStringAttribute (
        /*[in]*/ BSTR attribute,
        /*[in,out]*/ BSTR * values ) = 0;
      virtual HRESULT __stdcall SetMINLPLagrangeMultipliers (
        /*[in]*/ BSTR lmtype,
        /*[in]*/ VARIANT ids,
        /*[in]*/ VARIANT values ) = 0;
      virtual HRESULT __stdcall GetMINLPLagrangeMultipliers (
        /*[in]*/ BSTR lmtype,
        /*[in]*/ VARIANT ids,
        /*[in,out]*/ VARIANT * values ) = 0;
      virtual HRESULT __stdcall GetMINLPHessianStructure (
        /*[in,out]*/ long * Size,
        /*[in,out]*/ VARIANT * rowindex,
        /*[in,out]*/ VARIANT * columnindex ) = 0;
      virtual HRESULT __stdcall SetMINLPHessianValues (
        /*[in]*/ VARIANT values ) = 0;
      virtual HRESULT __stdcall GetMINLPHessianValues (
        /*[in,out]*/ VARIANT * values ) = 0;
};

struct __declspec(uuid("678c09cd-7d66-11d2-a67d-00105a42887f"))
ICapeMINLPSystem : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall Solve ( ) = 0;
      virtual HRESULT __stdcall get_parameters (
        /*[out,retval]*/ IDispatch * * parameters ) = 0;
};

struct __declspec(uuid("678c09ce-7d66-11d2-a67d-00105a42887f"))
ICapeMINLPSolverManager : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CreateMINLPSystem (
        /*[in]*/ IDispatch * theMINLP,
        /*[in,out]*/ IDispatch * * theMINLPSystem ) = 0;
};

struct __declspec(uuid("678c0b0f-7d66-11d2-a67d-00105a42887f"))
ECapeOutsideSolverScope : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_code (
        /*[out,retval]*/ long * code ) = 0;
      virtual HRESULT __stdcall get_description (
        /*[out,retval]*/ BSTR * description ) = 0;
      virtual HRESULT __stdcall get_scope (
        /*[out,retval]*/ BSTR * scope ) = 0;
      virtual HRESULT __stdcall get_interfaceName (
        /*[out,retval]*/ BSTR * interfaceName ) = 0;
      virtual HRESULT __stdcall get_operation (
        /*[out,retval]*/ BSTR * operation ) = 0;
      virtual HRESULT __stdcall get_moreInfo (
        /*[out,retval]*/ BSTR * moreInfo ) = 0;
};

struct __declspec(uuid("3ff0b24b-4299-4dac-a46e-7843728ad205"))
ECapeHessianInfoNotAvailable : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_code (
        /*[out,retval]*/ long * code ) = 0;
      virtual HRESULT __stdcall get_description (
        /*[out,retval]*/ BSTR * description ) = 0;
      virtual HRESULT __stdcall get_scope (
        /*[out,retval]*/ BSTR * scope ) = 0;
      virtual HRESULT __stdcall get_interfaceName (
        /*[out,retval]*/ BSTR * interfaceName ) = 0;
      virtual HRESULT __stdcall get_operation (
        /*[out,retval]*/ BSTR * operation ) = 0;
      virtual HRESULT __stdcall get_moreInfo (
        /*[out,retval]*/ BSTR * moreInfo ) = 0;
};

struct __declspec(uuid("678c09b2-7d66-11d2-a67d-00105a42887f"))
ICapePpdb : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall Open (
        /*[in]*/ BSTR ppdbName,
        /*[in]*/ BSTR loginInformation,
        /*[in,out]*/ VARIANT * isImplemented ) = 0;
      virtual HRESULT __stdcall Close ( ) = 0;
      virtual HRESULT __stdcall ExpandCompound (
        /*[in]*/ VARIANT types,
        /*[in]*/ VARIANT Specifications,
        /*[in,out]*/ short * numberOfSubstances,
        /*[in,out]*/ CapeArrayPpdbCompound * substances ) = 0;
      virtual HRESULT __stdcall GetStructure (
        /*[in]*/ short specType,
        /*[in]*/ BSTR Specification,
        /*[in,out]*/ short * structureFormat,
        /*[in,out]*/ BSTR * chemicalStructure ) = 0;
      virtual HRESULT __stdcall ExpandDictionary (
        /*[in]*/ short specType,
        /*[in]*/ BSTR Item,
        /*[in,out]*/ VARIANT * dictionaryEntries ) = 0;
      virtual HRESULT __stdcall GetCompounds (
        /*[in]*/ short rankNo,
        /*[in,out]*/ short * numberOfCompounds,
        /*[in,out]*/ CapeArrayPpdbCompound * compounds,
        /*[in,out]*/ VARIANT * purities,
        /*[in,out]*/ VARIANT * reactionStoichiometry,
        /*[in,out]*/ VARIANT_BOOL * isOK ) = 0;
      virtual HRESULT __stdcall GetBibliography (
        /*[in]*/ short rankNo,
        /*[in,out]*/ BSTR * referenceID,
        /*[in,out]*/ BSTR * authors,
        /*[in,out]*/ BSTR * publisher,
        /*[in,out]*/ BSTR * journal,
        /*[in,out]*/ BSTR * coden,
        /*[in,out]*/ BSTR * issn,
        /*[in,out]*/ BSTR * titleOfBook,
        /*[in,out]*/ BSTR * isbn,
        /*[in,out]*/ BSTR * edition,
        /*[in,out]*/ BSTR * volume,
        /*[in,out]*/ BSTR * issue,
        /*[in,out]*/ BSTR * page,
        /*[in,out]*/ BSTR * year,
        /*[in,out]*/ BSTR * titleOfPaper,
        /*[in,out]*/ VARIANT_BOOL * isOK ) = 0;
};

struct __declspec(uuid("678c09b3-7d66-11d2-a67d-00105a42887f"))
ICapePpdbRegister : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetInfo (
        /*[in,out]*/ VARIANT * ppdbNames,
        /*[in,out]*/ VARIANT * ppdbInformations ) = 0;
};

struct __declspec(uuid("678c09b4-7d66-11d2-a67d-00105a42887f"))
ICapePpdbTables : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall QueryForTables (
        /*[in]*/ short numberOfCompounds,
        /*[in]*/ VARIANT types,
        /*[in]*/ VARIANT chemicalSystems,
        /*[in]*/ VARIANT_BOOL querySubmixtures,
        /*[in]*/ VARIANT props ) = 0;
      virtual HRESULT __stdcall ExtendedQueryForTables (
        /*[in]*/ short numberOfCompounds,
        /*[in]*/ VARIANT types,
        /*[in]*/ VARIANT chemicalSystem,
        /*[in]*/ VARIANT_BOOL querySubmixtures,
        /*[in]*/ VARIANT props,
        /*[in]*/ BSTR phaseEqInformation,
        /*[in]*/ VARIANT statesOfAggregation,
        /*[in]*/ BSTR tableInformation,
        /*[in]*/ BSTR addPropInformation,
        /*[in]*/ float lowerTemperature,
        /*[in]*/ float upperTemperature,
        /*[in]*/ float lowerPressure,
        /*[in]*/ float upperPressure,
        /*[in]*/ float lowerMoleFraction,
        /*[in]*/ float upperMoleFraction,
        /*[in]*/ short rankNoOfChemicalSystem ) = 0;
      virtual HRESULT __stdcall GetTableDescription (
        /*[in]*/ short numberOfTablesWanted,
        /*[in,out]*/ short * firstRankNo,
        /*[in,out]*/ short * lastRankNo,
        /*[in,out]*/ VARIANT * numberOfCompounds,
        /*[in,out]*/ VARIANT * compoundNames,
        /*[in,out]*/ VARIANT * tableDescriptions,
        /*[in,out]*/ VARIANT * numbersOfProperties,
        /*[in,out]*/ VARIANT * numbersOfDataPoints,
        /*[in,out]*/ VARIANT * temperatureRanges,
        /*[in,out]*/ VARIANT * temperatureUnits,
        /*[in,out]*/ VARIANT * pressureRanges,
        /*[in,out]*/ VARIANT * pressureUnits,
        /*[in,out]*/ VARIANT_BOOL * isOK ) = 0;
      virtual HRESULT __stdcall GetTableData (
        /*[in]*/ short rankNo,
        /*[in]*/ VARIANT_BOOL siWanted,
        /*[in,out]*/ short * numberOfProperties,
        /*[in,out]*/ VARIANT * props,
        /*[in,out]*/ VARIANT * relatedToCompoundNo,
        /*[in,out]*/ BSTR * phaseEqInformation,
        /*[in,out]*/ BSTR * tableInformation,
        /*[in,out]*/ VARIANT * statesOfAggregation,
        /*[in,out]*/ short * numberOfDataPoints,
        /*[in,out]*/ VARIANT * values,
        /*[in,out]*/ VARIANT * units,
        /*[in,out]*/ VARIANT_BOOL * isOK ) = 0;
      virtual HRESULT __stdcall GetTableDataInformation (
        /*[in]*/ short rankNo,
        /*[in]*/ VARIANT_BOOL siWanted,
        /*[in,out]*/ VARIANT * expErrors,
        /*[in,out]*/ VARIANT * errorUnits,
        /*[in,out]*/ VARIANT * addPropInformation,
        /*[in,out]*/ VARIANT * setInformation,
        /*[in,out]*/ VARIANT * notes,
        /*[in,out]*/ VARIANT_BOOL * isOK ) = 0;
};

struct __declspec(uuid("678c09b5-7d66-11d2-a67d-00105a42887f"))
ICapePpdbModels : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall QueryForModels (
        /*[in]*/ short numberOfCompounds,
        /*[in]*/ VARIANT types,
        /*[in]*/ VARIANT chemicalSystem,
        /*[in]*/ VARIANT_BOOL querySubmixtures,
        /*[in]*/ BSTR modelName,
        /*[in]*/ BSTR property ) = 0;
      virtual HRESULT __stdcall ExtendedQueryForModels (
        /*[in]*/ short numberOfCompounds,
        /*[in]*/ VARIANT types,
        /*[in]*/ VARIANT chemicalSystem,
        /*[in]*/ VARIANT_BOOL querySubmixtures,
        /*[in]*/ BSTR modelName,
        /*[in]*/ BSTR property,
        /*[in]*/ BSTR stateOfAggregation,
        /*[in]*/ BSTR modelSpecificInformation,
        /*[in]*/ float lowerTemperature,
        /*[in]*/ float upperTemperature,
        /*[in]*/ float lowerPressure,
        /*[in]*/ float upperPressure ) = 0;
      virtual HRESULT __stdcall QueryTableID (
        /*[in]*/ BSTR tableID ) = 0;
      virtual HRESULT __stdcall GetModelDescription (
        /*[in]*/ short numberOfSetsWanted,
        /*[in,out]*/ short * firstRankNo,
        /*[in,out]*/ short * lastRankNo,
        /*[in,out]*/ VARIANT * numberOfCompounds,
        /*[in,out]*/ VARIANT * compoundNames,
        /*[in,out]*/ VARIANT * modelNames,
        /*[in,out]*/ VARIANT * numberOfIndependentProperties,
        /*[in,out]*/ VARIANT * limitsOfValidity,
        /*[in,out]*/ VARIANT * unitsForLimitsOfValidity,
        /*[in,out]*/ VARIANT_BOOL * isOK ) = 0;
      virtual HRESULT __stdcall GetModel (
        /*[in]*/ short rankNo,
        /*[in,out]*/ IDispatch * * model,
        /*[in,out]*/ VARIANT_BOOL * isOK ) = 0;
      virtual HRESULT __stdcall GetModelParameters (
        /*[in]*/ short rankNo,
        /*[in,out]*/ BSTR * modelName,
        /*[in,out]*/ BSTR * dependentProperty,
        /*[in,out]*/ short * numberOfIndependentProperties,
        /*[in,out]*/ VARIANT * independentProperties,
        /*[in,out]*/ VARIANT * relatedToCompoundNo,
        /*[in,out]*/ BSTR * phaseEqInformation,
        /*[in,out]*/ BSTR * setInformation,
        /*[in,out]*/ BSTR * stateOfAggregation,
        /*[in,out]*/ VARIANT * propertyUnits,
        /*[in,out]*/ VARIANT * parameterNames,
        /*[in,out]*/ VARIANT * parameters,
        /*[in,out]*/ short * parameterType,
        /*[in,out]*/ VARIANT * limitsOfValidity,
        /*[in,out]*/ VARIANT_BOOL * isOK ) = 0;
      virtual HRESULT __stdcall GetModelParametersInformation (
        /*[in]*/ short rankNo,
        /*[in,out]*/ VARIANT * tableIDsOriginalData,
        /*[in,out]*/ VARIANT * addPropInformation,
        /*[in,out]*/ VARIANT * varianceCovarianceMatrix,
        /*[in,out]*/ float * estimatedPrecision,
        /*[in,out]*/ VARIANT_BOOL * isOK ) = 0;
};

struct __declspec(uuid("78defbbd-ed69-4f81-90a4-6b636ce13164"))
ICapePSPCollection : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall index (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ long * position ) = 0;
};

struct __declspec(uuid("7a4d266a-e54d-4a7d-8877-632e89344fed"))
ICapePSPResource : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetType (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall GetParameters (
        /*[out,retval]*/ struct ICapePSPCollection * * parameters ) = 0;
};

struct __declspec(uuid("8f3c13f5-0c69-42a2-9438-4299c630a0a4"))
ICapePSPResourceRequirement : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetParameters (
        /*[out,retval]*/ struct ICapePSPCollection * * parameters ) = 0;
      virtual HRESULT __stdcall GetResource (
        /*[out,retval]*/ struct ICapePSPResource * * resource ) = 0;
      virtual HRESULT __stdcall SetResource (
        /*[in]*/ struct ICapePSPResource * resource ) = 0;
};

struct __declspec(uuid("dff34851-e60e-40dd-baa1-4fede69b3467"))
ICapePSPResourceRequirementCollection : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CreateResourceRequirement (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct ICapePSPResourceRequirement * * res ) = 0;
      virtual HRESULT __stdcall CloneResourceRequirement (
        /*[in]*/ struct ICapePSPResourceRequirement * origin,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct ICapePSPResourceRequirement * * res ) = 0;
      virtual HRESULT __stdcall RemoveAll ( ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ long index ) = 0;
};

struct __declspec(uuid("45a1b544-4be6-43f9-83a4-4a7cfee802fe"))
ICapePSPTransaction : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetParameters (
        /*[out,retval]*/ struct ICapePSPCollection * * parameters ) = 0;
};

struct __declspec(uuid("1dd05fa1-eb10-4cbe-a94a-24f6ea7e7815"))
ICapePSPReport : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall ProduceReport ( ) = 0;
      virtual HRESULT __stdcall GetParameters (
        /*[out,retval]*/ IDispatch * * parameters ) = 0;
};

struct __declspec(uuid("e09e0b56-6a51-496f-b796-2c45c549b510"))
ICapePSPResourceCollection : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CreateResource (
        /*[in]*/ BSTR name,
        /*[in]*/ long kind,
        /*[out,retval]*/ struct ICapePSPResource * * res ) = 0;
      virtual HRESULT __stdcall CloneResource (
        /*[in]*/ IDispatch * origin,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct ICapePSPResource * * res ) = 0;
      virtual HRESULT __stdcall RemoveAll ( ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ long index ) = 0;
};

struct __declspec(uuid("052dafef-0f43-4f4d-88ab-50f6ad8fc0eb"))
ICapePSPTransactionCollection : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CreateTransaction (
        /*[in]*/ BSTR name,
        /*[in]*/ long kind,
        /*[out,retval]*/ struct ICapePSPTransaction * * trans ) = 0;
      virtual HRESULT __stdcall CloneTransaction (
        /*[in]*/ struct ICapePSPTransaction * origin,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct ICapePSPTransaction * * trans ) = 0;
      virtual HRESULT __stdcall RemoveAll ( ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ long index ) = 0;
};

struct __declspec(uuid("85e4c4e2-57fc-43aa-a39a-78d392947080"))
ICapePSPRecipeEntity : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetParameters (
        /*[out,retval]*/ struct ICapePSPCollection * * parameters ) = 0;
      virtual HRESULT __stdcall GetResourceRequirements (
        /*[out,retval]*/ struct ICapePSPResourceRequirementCollection * * requirements ) = 0;
      virtual HRESULT __stdcall GetChildEntities (
        /*[out,retval]*/ struct ICapePSPRecipeEntityCollection * * collection ) = 0;
      virtual HRESULT __stdcall GetLevel (
        /*[out,retval]*/ long * level ) = 0;
};

struct __declspec(uuid("b3245794-9a3e-4af7-a8ca-2308290106f0"))
ICapePSPRecipeEntityCollection : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CreateRecipeEntity (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct ICapePSPRecipeEntity * * rec ) = 0;
      virtual HRESULT __stdcall CloneRecipeEntity (
        /*[in]*/ struct ICapePSPRecipeEntity * origin,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct ICapePSPRecipeEntity * * rec ) = 0;
      virtual HRESULT __stdcall RemoveAll ( ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall GetLevel (
        /*[out,retval]*/ long * level ) = 0;
};

struct __declspec(uuid("f3e9cf96-df8f-40f3-9543-e8d17cabbf96"))
ICapePSPSchedule : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetParameters (
        /*[out,retval]*/ struct ICapePSPCollection * * parameters ) = 0;
      virtual HRESULT __stdcall GetResourceRequirements (
        /*[out,retval]*/ struct ICapePSPResourceRequirementCollection * * requirements ) = 0;
      virtual HRESULT __stdcall GetScheduleEntries (
        /*[out,retval]*/ struct ICapePSPScheduleEntryCollection * * collection ) = 0;
      virtual HRESULT __stdcall Solve ( ) = 0;
};

struct __declspec(uuid("033ac3ef-7449-4113-a10e-d70161b3fc22"))
ICapePSPScheduleCollection : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CreateSchedule (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct ICapePSPSchedule * * sched ) = 0;
      virtual HRESULT __stdcall CloneSchedule (
        /*[in]*/ IDispatch * origin,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct ICapePSPSchedule * * sched ) = 0;
      virtual HRESULT __stdcall RemoveAll ( ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ long index ) = 0;
};

struct __declspec(uuid("f840eca2-941b-4af7-84db-47e2187430a2"))
ICapePSP : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetResourceCollection (
        /*[out,retval]*/ struct ICapePSPResourceCollection * * resourceManager ) = 0;
      virtual HRESULT __stdcall GetRecipeCollection (
        /*[out,retval]*/ struct ICapePSPRecipeEntityCollection * * recipeManager ) = 0;
      virtual HRESULT __stdcall GetScheduleCollection (
        /*[out,retval]*/ struct ICapePSPScheduleCollection * * planManager ) = 0;
      virtual HRESULT __stdcall GetTransactionCollection (
        /*[out,retval]*/ struct ICapePSPTransactionCollection * * commercialManager ) = 0;
      virtual HRESULT __stdcall GetReports (
        /*[out,retval]*/ struct ICapePSPReport * * reports ) = 0;
};

struct __declspec(uuid("25bc241a-8110-4806-af7a-cb6cfa7b9a57"))
ICapePSPScheduleEntryCollection : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall CreateScheduleEntry (
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct ICapePSPScheduleEntry * * schedtry ) = 0;
      virtual HRESULT __stdcall CloneScheduleEntry (
        /*[in]*/ struct ICapePSPScheduleEntry * origin,
        /*[in]*/ BSTR name,
        /*[out,retval]*/ struct ICapePSPScheduleEntry * * schedtry ) = 0;
      virtual HRESULT __stdcall RemoveAll ( ) = 0;
      virtual HRESULT __stdcall Remove (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall GetLevel (
        /*[out,retval]*/ long * level ) = 0;
};

struct __declspec(uuid("638d84dc-84e9-4aea-83a4-0bb8852832e9"))
ICapePSPScheduleEntry : IDispatch
{
    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall GetParameters (
        /*[out,retval]*/ struct ICapePSPCollection * * parameters ) = 0;
      virtual HRESULT __stdcall GetResourceRequirements (
        /*[out,retval]*/ struct ICapePSPResourceRequirementCollection * * requirements ) = 0;
      virtual HRESULT __stdcall GetChildEntries (
        /*[out,retval]*/ struct ICapePSPScheduleEntryCollection * * collection ) = 0;
      virtual HRESULT __stdcall GetLevel (
        /*[out,retval]*/ long * level ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_CAPEOPEN110 =
    {0x4a5e2e81,0xc093,0x11d4,{0x9f,0x1b,0x00,0x10,0xa4,0xd1,0x98,0xc2}};
extern "C" const GUID __declspec(selectany) IID_ICapeIdentification =
    {0x678c0990,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeCollection =
    {0x678c099a,0x0093,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeUtilities =
    {0x678c0a9b,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeParameterSpec =
    {0x678c099c,0x0093,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeRealParameterSpec =
    {0x678c099d,0x0093,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeIntegerParameterSpec =
    {0x678c099e,0x0093,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeOptionParameterSpec =
    {0x678c099f,0x0093,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeBooleanParameterSpec =
    {0x678c09a8,0x0093,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeArrayParameterSpec =
    {0x678c09a9,0x0093,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeParameter =
    {0x678c09a0,0x0093,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeBoundaries =
    {0x678c0b29,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeRoot =
    {0x678c0b10,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeUser =
    {0x678c0b11,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeUnknown =
    {0x678c0b12,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeData =
    {0x678c0b13,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeLicenceError =
    {0x678c0b14,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeBadCOParameter =
    {0x678c0b15,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeBadArgument =
    {0xe29e42b3,0xe481,0x45c6,{0xa7,0x37,0x78,0xf4,0xa7,0xfc,0x03,0x91}};
extern "C" const GUID __declspec(selectany) IID_ECapeInvalidArgument =
    {0x678c0b17,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeOutOfBounds =
    {0x678c0b18,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeImplementation =
    {0x678c0b19,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeNoImpl =
    {0x678c0b1a,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeLimitedImpl =
    {0x678c0b1b,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeComputation =
    {0x678c0b1c,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeOutOfResources =
    {0x678c0b1d,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeNoMemory =
    {0x678c0b1e,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeTimeOut =
    {0x678c0b1f,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeFailedInitialisation =
    {0x678c0b20,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeSolvingError =
    {0x678c0b21,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeBadInvOrder =
    {0x678c0b22,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeInvalidOperation =
    {0x678c0b23,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapePersistence =
    {0x678c0b24,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeIllegalAccess =
    {0x678c0b25,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapePersistenceNotFound =
    {0x678c0b26,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapePersistenceSystemError =
    {0x678c0b27,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapePersistenceOverflow =
    {0x678c0b28,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeThrmPropertyNotAvailable =
    {0x678c09b6,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeErrorDummy =
    {0x678c0b07,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSimulationContext =
    {0x678c0a9c,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeDiagnostic =
    {0x678c0a9d,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeMaterialTemplateSystem =
    {0x678c0a9e,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeCOSEUtilities =
    {0x678c0a9f,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoReliability =
    {0x678c0992,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoMaterialTemplate =
    {0x678c0993,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoMaterialObject =
    {0x678c0994,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoSystem =
    {0x678c0995,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoPropertyPackage =
    {0x678c0996,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoEquilibriumServer =
    {0x678c0997,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoCalculationRoutine =
    {0x678c0991,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoMaterial =
    {0x678c0a9b,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoMaterialContext =
    {0x678c0a9c,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoCompounds =
    {0x678c0a9d,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoPhases =
    {0x678c0a9e,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoPropertyRoutine =
    {0x678c0a9f,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoEquilibriumRoutine =
    {0x678c0aa0,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoUniversalConstant =
    {0x678c0aa1,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoPropertyPackageManager =
    {0x678c0aa2,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeUnit =
    {0x678c0998,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeUnitPort =
    {0x678c0999,0x0093,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeUnitReport =
    {0x678c099b,0x0093,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeUnitPortVariables =
    {0x678c09b1,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeKineticReactionContext =
    {0x678c0afe,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeElectrolyteReactionContext =
    {0x678c0afd,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeReactionsPackageManager =
    {0x678c0afc,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeReactionChemistry =
    {0x678c0afb,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeReactionProperties =
    {0x678c0afa,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeReactionsRoutine =
    {0x678c0af9,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeUnitTypeInfo =
    {0x678c0aa1,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeThermoPetroFractions =
    {0x678c0aa0,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericMatrix =
    {0x3ad3c8f6,0xe6ec,0x4e63,{0xb5,0x1e,0x0e,0x94,0x03,0x53,0x54,0x63}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericUnstructuredMatrix =
    {0x678c09af,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericESO =
    {0x9304e044,0x3311,0x41ed,{0x87,0x66,0x01,0x23,0xcb,0x44,0x03,0x8a}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericFullMatrix =
    {0x678c0b71,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericBandedMatrix =
    {0x678c0b72,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericLAESO =
    {0x678c0b74,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericNLAESO =
    {0x678c0b75,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericDAESO =
    {0x678c0b76,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericGlobalESO =
    {0x678c0b77,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericGlobalLAESO =
    {0x678c0b78,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericGlobalNLAESO =
    {0x678c0b79,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericGlobalDAESO =
    {0x678c0b7a,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericEvent =
    {0x678c0b81,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericExternalEventInfo =
    {0x678c0b87,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericModel =
    {0x678c0b7c,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericContinuousModel =
    {0x678c0b7d,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericHierarchicalModel =
    {0x678c0b7e,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericAggregateModel =
    {0x678c0b7f,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericEventInfo =
    {0x678c0b86,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericSTN =
    {0x678c0b80,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericBasicEvent =
    {0x678c0b82,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericCompositeEvent =
    {0x678c0b83,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericBinaryEvent =
    {0x678c0b84,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericUnaryEvent =
    {0x678c0b85,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericInternalEventInfo =
    {0x678c0b88,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericSolver =
    {0x678c0b8a,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericLASolver =
    {0x678c0b8b,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericNLASolver =
    {0x678c0b8c,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeNumericDAESolver =
    {0x678c0b8d,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTFlowsheetManager =
    {0x678c0b65,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTFlowsheet =
    {0x678c0b66,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTProcessGraph =
    {0x678c0b67,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTPartitionGraph =
    {0x678c0b68,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTOpenPartitionGraph =
    {0x678c0b69,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTAnalysisManager =
    {0x678c0b6a,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTAnalysis =
    {0x678c0b6b,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTSequencing =
    {0x678c0b6c,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTTearing =
    {0x678c0b6d,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTPartitioning =
    {0x678c0b6e,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeSMSTSMAnalysis =
    {0x678c0b70,0x0100,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeMINLP =
    {0x678c09cc,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeMINLPSystem =
    {0x678c09cd,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapeMINLPSolverManager =
    {0x678c09ce,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeOutsideSolverScope =
    {0x678c0b0f,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ECapeHessianInfoNotAvailable =
    {0x3ff0b24b,0x4299,0x4dac,{0xa4,0x6e,0x78,0x43,0x72,0x8a,0xd2,0x05}};
extern "C" const GUID __declspec(selectany) IID_ICapePpdb =
    {0x678c09b2,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapePpdbRegister =
    {0x678c09b3,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapePpdbTables =
    {0x678c09b4,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapePpdbModels =
    {0x678c09b5,0x7d66,0x11d2,{0xa6,0x7d,0x00,0x10,0x5a,0x42,0x88,0x7f}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPCollection =
    {0x78defbbd,0xed69,0x4f81,{0x90,0xa4,0x6b,0x63,0x6c,0xe1,0x31,0x64}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPResource =
    {0x7a4d266a,0xe54d,0x4a7d,{0x88,0x77,0x63,0x2e,0x89,0x34,0x4f,0xed}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPResourceRequirement =
    {0x8f3c13f5,0x0c69,0x42a2,{0x94,0x38,0x42,0x99,0xc6,0x30,0xa0,0xa4}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPResourceRequirementCollection =
    {0xdff34851,0xe60e,0x40dd,{0xba,0xa1,0x4f,0xed,0xe6,0x9b,0x34,0x67}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPTransaction =
    {0x45a1b544,0x4be6,0x43f9,{0x83,0xa4,0x4a,0x7c,0xfe,0xe8,0x02,0xfe}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPReport =
    {0x1dd05fa1,0xeb10,0x4cbe,{0xa9,0x4a,0x24,0xf6,0xea,0x7e,0x78,0x15}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPResourceCollection =
    {0xe09e0b56,0x6a51,0x496f,{0xb7,0x96,0x2c,0x45,0xc5,0x49,0xb5,0x10}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPTransactionCollection =
    {0x052dafef,0x0f43,0x4f4d,{0x88,0xab,0x50,0xf6,0xad,0x8f,0xc0,0xeb}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPRecipeEntity =
    {0x85e4c4e2,0x57fc,0x43aa,{0xa3,0x9a,0x78,0xd3,0x92,0x94,0x70,0x80}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPRecipeEntityCollection =
    {0xb3245794,0x9a3e,0x4af7,{0xa8,0xca,0x23,0x08,0x29,0x01,0x06,0xf0}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPSchedule =
    {0xf3e9cf96,0xdf8f,0x40f3,{0x95,0x43,0xe8,0xd1,0x7c,0xab,0xbf,0x96}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPScheduleCollection =
    {0x033ac3ef,0x7449,0x4113,{0xa1,0x0e,0xd7,0x01,0x61,0xb3,0xfc,0x22}};
extern "C" const GUID __declspec(selectany) IID_ICapePSP =
    {0xf840eca2,0x941b,0x4af7,{0x84,0xdb,0x47,0xe2,0x18,0x74,0x30,0xa2}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPScheduleEntryCollection =
    {0x25bc241a,0x8110,0x4806,{0xaf,0x7a,0xcb,0x6c,0xfa,0x7b,0x9a,0x57}};
extern "C" const GUID __declspec(selectany) IID_ICapePSPScheduleEntry =
    {0x638d84dc,0x84e9,0x4aea,{0x83,0xa4,0x0b,0xb8,0x85,0x28,0x32,0xe9}};

#pragma pack(pop)
